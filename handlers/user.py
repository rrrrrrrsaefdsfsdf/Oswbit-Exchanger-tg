import logging
import aiohttp
import asyncio
from datetime import datetime
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, BufferedInputFile, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.models import Database
from keyboards.reply import ReplyKeyboards
from keyboards.inline import InlineKeyboards
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils.bitcoin import BitcoinAPI
from utils.captcha import CaptchaGenerator
from config import config
from handlers.operator import (
    process_onlypays_webhook,
    notify_operators_paid_order,
    notify_operators_error_order,
    notify_client_payment_received,
    notify_client_order_cancelled
)



logger = logging.getLogger(__name__)
router = Router()

class OnlyPaysAPI:
    def __init__(self, api_id: str, secret_key: str, payment_key: str = None):
        self.api_id = api_id
        self.secret_key = secret_key
        self.payment_key = payment_key
        self.base_url = "https://onlypays.net"
    
    async def create_order(self, amount: int, payment_type: str, personal_id: str = None, trans: bool = False):
        url = f"{self.base_url}/get_requisite"
        data = {
            "api_id": self.api_id,
            "secret_key": self.secret_key,
            "amount_rub": amount,
            "payment_type": payment_type
        }
        
        if personal_id:
            data["personal_id"] = personal_id
        
        if trans:
            data["trans"] = True
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    result = await response.json()
                    logger.info(f"OnlyPays create_order response: {result}")
                    return result
        except Exception as e:
            logger.error(f"OnlyPays create_order error: {e}")
            return {"success": False, "error": str(e)}
    
    async def get_order_status(self, order_id: str):
        url = f"{self.base_url}/get_status"
        data = {
            "api_id": self.api_id,
            "secret_key": self.secret_key,
            "id": order_id
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    result = await response.json()
                    logger.info(f"OnlyPays get_status response: {result}")
                    return result
        except Exception as e:
            logger.error(f"OnlyPays get_status error: {e}")
            return {"success": False, "error": str(e)}
    
    async def cancel_order(self, order_id: str):
        url = f"{self.base_url}/cancel_order"
        data = {
            "api_id": self.api_id,
            "secret_key": self.secret_key,
            "id": order_id
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    result = await response.json()
                    logger.info(f"OnlyPays cancel_order response: {result}")
                    return result
        except Exception as e:
            logger.error(f"OnlyPays cancel_order error: {e}")
            return {"success": False, "error": str(e)}
    
    async def get_balance(self):
        if not self.payment_key:
            return {"success": False, "error": "Payment key not provided"}
        
        url = f"{self.base_url}/get_balance"
        data = {
            "api_id": self.api_id,
            "payment_key": self.payment_key
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    result = await response.json()
                    logger.info(f"OnlyPays get_balance response: {result}")
                    return result
        except Exception as e:
            logger.error(f"OnlyPays get_balance error: {e}")
            return {"success": False, "error": str(e)}
    
    async def create_payout(self, payout_type: str, amount: int, requisite: str, bank: str, personal_id: str = None):
        if not self.payment_key:
            return {"success": False, "error": "Payment key not provided"}
        
        url = f"{self.base_url}/create_payout"
        data = {
            "api_id": self.api_id,
            "payment_key": self.payment_key,
            "type": payout_type,
            "amount": amount,
            "requisite": requisite,
            "bank": bank
        }
        
        if personal_id:
            data["personal_id"] = personal_id
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    result = await response.json()
                    logger.info(f"OnlyPays create_payout response: {result}")
                    return result
        except Exception as e:
            logger.error(f"OnlyPays create_payout error: {e}")
            return {"success": False, "error": str(e)}
    
    async def get_payout_status(self, payout_id: str):
        if not self.payment_key:
            return {"success": False, "error": "Payment key not provided"}
        
        url = f"{self.base_url}/payout_status"
        data = {
            "api_id": self.api_id,
            "payment_key": self.payment_key,
            "id": payout_id
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    result = await response.json()
                    logger.info(f"OnlyPays payout_status response: {result}")
                    return result
        except Exception as e:
            logger.error(f"OnlyPays payout_status error: {e}")
            return {"success": False, "error": str(e)}

onlypays_api = OnlyPaysAPI(
    api_id=config.ONLYPAYS_API_ID,
    secret_key=config.ONLYPAYS_SECRET_KEY,
    payment_key=getattr(config, 'ONLYPAYS_PAYMENT_KEY', None)
)




async def process_onlypays_webhook(webhook_data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç OnlyPays"""
    try:
        order_id = webhook_data.get('personal_id')  # –ù–∞—à –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –∑–∞—è–≤–∫–∏
        onlypays_id = webhook_data.get('id')
        status = webhook_data.get('status')
        received_sum = webhook_data.get('received_sum')
        
        if not order_id:
            logger.error(f"Webhook without personal_id: {webhook_data}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ –ë–î
        order = await db.get_order(int(order_id))
        if not order:
            logger.error(f"Order not found: {order_id}")
            return
        
        if status == 'finished':
            # –ó–∞—è–≤–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–º
            await db.update_order(
                order['id'], 
                status='paid_by_client',
                received_sum=received_sum
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
            await notify_operators_paid_order(order, received_sum)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            await notify_client_payment_received(order)
            
        elif status == 'cancelled':
            # –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
            await db.update_order(order['id'], status='cancelled')
            
            # –ú–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –æ—Ç–º–µ–Ω–µ
            await notify_client_order_cancelled(order)
            
    except Exception as e:
        logger.error(f"Webhook processing error: {e}")

async def notify_operators_paid_order(order: dict, received_sum: float):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ–ø–ª–∞—á–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ"""
    try:
        display_id = order.get('personal_id', order['id'])
        
        text = (
            f"üí∞ <b>–ó–ê–Ø–í–ö–ê –û–ü–õ–ê–ß–ï–ù–ê</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.get('user_id', 'N/A')}\n"
            f"üíµ –ü–æ–ª—É—á–µ–Ω–æ: {received_sum:,.0f} ‚ÇΩ\n"
            f"üí∞ –°—É–º–º–∞ –∑–∞—è–≤–∫–∏: {order['total_amount']:,.0f} ‚ÇΩ\n"
            f"‚Çø –ö –æ—Ç–ø—Ä–∞–≤–∫–µ: {order['amount_btc']:.8f} BTC\n"
            f"üìç –ê–¥—Ä–µ—Å: <code>{order['btc_address']}</code>\n\n"
            f"‚è∞ –í—Ä–µ–º—è: {order['created_at']}\n\n"
            f"üéØ <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ Bitcoin!</b>"
        )
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª Bitcoin", 
                callback_data=f"op_sent_{order['id']}"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞", 
                callback_data=f"op_problem_{order['id']}"
            ),
            InlineKeyboardButton(
                text="üìù –ó–∞–º–µ—Ç–∫–∞", 
                callback_data=f"op_note_{order['id']}"
            )
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —á–∞—Ç
        from main import bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        await bot.send_message(
            config.OPERATOR_CHAT_ID,
            text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Notify operators error: {e}")

async def notify_operators_error_order(order: dict, error_message: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—à–∏–±–∫–µ –≤ –∑–∞—è–≤–∫–µ"""
    try:
        display_id = order.get('personal_id', order['id'])
        
        text = (
            f"‚ö†Ô∏è <b>–û–®–ò–ë–ö–ê –í –ó–ê–Ø–í–ö–ï</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.get('user_id', 'N/A')}\n"
            f"üí∞ –°—É–º–º–∞: {order['total_amount']:,.0f} ‚ÇΩ\n"
            f"‚ùå –û—à–∏–±–∫–∞: {error_message}\n\n"
            f"‚è∞ –í—Ä–µ–º—è: {order['created_at']}\n\n"
            f"üîß <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!</b>"
        )
        
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="üîß –û–±—Ä–∞–±–æ—Ç–∞—Ç—å", 
                callback_data=f"op_handle_{order['id']}"
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", 
                callback_data=f"op_cancel_{order['id']}"
            )
        )
        
        from main import bot
        await bot.send_message(
            config.OPERATOR_CHAT_ID,
            text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Notify operators error: {e}")

async def notify_client_payment_received(order: dict):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        display_id = order.get('personal_id', order['id'])
        
        text = (
            f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω!</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"üí∞ –°—É–º–º–∞: {order['total_amount']:,.0f} ‚ÇΩ\n"
            f"‚Çø –ö –ø–æ–ª—É—á–µ–Ω–∏—é: {order['amount_btc']:.8f} BTC\n\n"
            f"üîÑ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É...</b>\n"
            f"Bitcoin –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –∞–¥—Ä–µ—Å –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.\n\n"
            f"üì± –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏."
        )
        
        from main import bot
        await bot.send_message(
            order['user_id'],
            text,
            parse_mode="HTML",
            reply_markup=ReplyKeyboards.main_menu()
        )
        
    except Exception as e:
        logger.error(f"Notify client error: {e}")

async def notify_client_order_cancelled(order: dict):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏"""
    try:
        display_id = order.get('personal_id', order['id'])
        
        text = (
            f"‚ùå <b>–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"üí∞ –°—É–º–º–∞: {order['total_amount']:,.0f} ‚ÇΩ\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã\n\n"
            f"–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –¥–ª—è –æ–±–º–µ–Ω–∞."
        )
        
        from main import bot
        await bot.send_message(
            order['user_id'],
            text,
            parse_mode="HTML",
            reply_markup=ReplyKeyboards.main_menu()
        )
        
    except Exception as e:
        logger.error(f"Notify client cancelled error: {e}")









class ExchangeStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_btc_address = State()
    waiting_for_captcha = State()
    waiting_for_contact = State()
    waiting_for_address = State()
    waiting_for_card_details = State()
    waiting_for_note = State() 

db = Database(config.DATABASE_URL)

async def show_main_menu(message_or_callback, is_callback=False):
    default_welcome = (
        f"üéâ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å, –¥–æ—Ä–æ–≥–∏–µ –¥—Ä—É–∑—å—è üéâ\n"
        f"üí∞ {config.EXCHANGE_NAME} üí∞\n\n"
        f"üü° BTC - BITCOIN\n\n"
        f"üî• –ù–ê–î–Å–ñ–ù–´–ô, –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ô –ò –ú–û–ú–ï–ù–¢–ê–õ–¨–ù–´–ô –û–ë–ú–ï–ù –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢ üî•\n\n"
        f"‚ö°Ô∏è –°–ê–ú–ê–Ø –ù–ò–ó–ö–ê–Ø –ö–û–ú–ò–°–°–ò–Ø\n"
        f"ü§ñ –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–±–º–µ–Ω 24/7\n"
        f"‚úÖ –ë—ã—Å—Ç—Ä–æ / –ù–∞–¥—ë–∂–Ω–æ / –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"ü§ù –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞:\n"
        f"üí¨ –ù–ê–® –ß–ê–¢ ‚ûñ {config.SUPPORT_CHAT}\n\n"
        f"üÜò –ù–∞—à–∞ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞:\n"
        f"üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä ‚ûñ {config.SUPPORT_MANAGER}\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üì¢ –ù–û–í–û–°–¢–ù–û–ô –ö–ê–ù–ê–õ ‚ûñ {config.NEWS_CHANNEL}\n"
        f"üìù –ö–ê–ù–ê–õ –û–¢–ó–´–í–´ ‚ûñ {config.REVIEWS_CHANNEL}\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üéÅ –ë–û–ù–£–°–´\n"
        f"üíé –ö–∞–∂–¥—ã–π 10 –æ–±–º–µ–Ω –¥–æ 6000‚ÇΩ –≤ –±–æ—Ç–µ –ë–ï–ó –ö–û–ú–ò–°–°–ò–ò\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:"
    )
    
    welcome_msg = await db.get_setting("welcome_message", default_welcome)
    
    if is_callback:
        await message_or_callback.bot.send_message(
            message_or_callback.message.chat.id,
            welcome_msg,
            reply_markup=ReplyKeyboards.main_menu()
        )
    else:
        await message_or_callback.answer(welcome_msg, reply_markup=ReplyKeyboards.main_menu())

@router.message(CommandStart())
async def start_handler(message: Message, state: FSMContext):
    await state.clear()
    
    user = await db.get_user(message.from_user.id)
    if not user:
        captcha_enabled = await db.get_setting("captcha_enabled", config.CAPTCHA_ENABLED)
        if captcha_enabled:
            image_buffer, answer = CaptchaGenerator.generate_image_captcha()
            await db.create_captcha_session(message.from_user.id, answer.upper())
            
            captcha_photo = BufferedInputFile(
                image_buffer.read(),
                filename="captcha.png"
            )
            
            await message.answer_photo(
                photo=captcha_photo,
                caption="ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏:",
                reply_markup=ReplyKeyboards.back_to_main()
            )
            await state.set_state(ExchangeStates.waiting_for_captcha)
            return
        else:
            await db.add_user(
                message.from_user.id,
                message.from_user.username,
                message.from_user.first_name,
                message.from_user.last_name
            )
    
    await show_main_menu(message)

@router.message(ExchangeStates.waiting_for_captcha)
async def captcha_handler(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ /start")
        return
        
    session = await db.get_captcha_session(message.from_user.id)
    if not session:
        await message.answer("–û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
        return
    
    user_answer = message.text.upper().strip()
    correct_answer = session['answer'].upper().strip()
    
    if user_answer == correct_answer:
        await db.delete_captcha_session(message.from_user.id)
        
        await db.add_user(
            message.from_user.id,
            message.from_user.username,
            message.from_user.first_name,
            message.from_user.last_name
        )
        
        data = await state.get_data()
        referral_user_id = data.get('referral_user_id')
        
        if referral_user_id and referral_user_id != message.from_user.id:
            await db.update_user(message.from_user.id, referred_by=referral_user_id)
            await db.update_referral_count(referral_user_id)
            
            try:
                await message.bot.send_message(
                    referral_user_id,
                    f"üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n"
                    f"üë§ {message.from_user.first_name}\n"
                    f"üí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!"
                )
            except:
                pass
        
        await message.answer("‚úÖ –í–µ—Ä–Ω–æ! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        await show_main_menu(message)
        await state.clear()
    else:
        attempts = session['attempts'] + 1
        if attempts >= 3:
            await db.delete_captcha_session(message.from_user.id)
            await message.answer("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start —Å–Ω–æ–≤–∞.")
            await state.clear()
        else:
            await db.execute_query(
                'UPDATE captcha_sessions SET attempts = ? WHERE user_id = ?',
                (attempts, message.from_user.id)
            )
            
            try:
                image_buffer, answer = CaptchaGenerator.generate_simple_image_captcha()
                await db.execute_query(
                    'UPDATE captcha_sessions SET answer = ? WHERE user_id = ?',
                    (answer.upper(), message.from_user.id)
                )
                
                captcha_photo = BufferedInputFile(
                    image_buffer.read(),
                    filename="captcha.png"
                )
                
                await message.answer_photo(
                    photo=captcha_photo,
                    caption=f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: {3-attempts}\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏:"
                )
            except:
                await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: {3-attempts}")

@router.message(F.text == "–ö—É–ø–∏—Ç—å")
async def buy_handler(message: Message, state: FSMContext):
    await state.clear()
    
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å."
    
    await message.answer(
        text,
        reply_markup=InlineKeyboards.buy_crypto_selection()
    )

@router.message(F.text == "–ü—Ä–æ–¥–∞—Ç—å")
async def sell_handler(message: Message, state: FSMContext):
    await state.clear()
    
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å."
    
    await message.answer(
        text,
        reply_markup=InlineKeyboards.sell_crypto_selection()
    )

@router.callback_query(F.data.startswith("buy_"))
async def buy_crypto_selected(callback: CallbackQuery, state: FSMContext):
    if callback.data == "buy_main_menu":
        await show_main_menu(callback, is_callback=True)
        return
    
    crypto = callback.data.replace("buy_", "").upper()
    
    if crypto == "BTC":
        await state.update_data(
            operation="buy",
            crypto=crypto,
            direction="rub_to_crypto"
        )
        
        btc_rate = await BitcoinAPI.get_btc_rate()
        
        text = (
            f"üí∞ <b>–ü–æ–∫—É–ø–∫–∞ Bitcoin</b>\n\n"
            f"üìä –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {btc_rate:,.0f} ‚ÇΩ\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboards.amount_input_keyboard(crypto.lower(), "rub_to_crypto"),
            parse_mode="HTML"
        )
        
        await state.set_state(ExchangeStates.waiting_for_amount)

@router.callback_query(F.data.startswith("sell_"))
async def sell_crypto_selected(callback: CallbackQuery, state: FSMContext):
    if callback.data == "sell_main_menu":
        await show_main_menu(callback, is_callback=True)
        return
    
    crypto = callback.data.replace("sell_", "").upper()
    
    if crypto == "BTC":
        await state.update_data(
            operation="sell",
            crypto=crypto,
            direction="crypto_to_rub"
        )
        
        btc_rate = await BitcoinAPI.get_btc_rate()
        
        text = (
            f"üí∏ <b>–ü—Ä–æ–¥–∞–∂–∞ Bitcoin</b>\n\n"
            f"üìä –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {btc_rate:,.0f} ‚ÇΩ\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboards.amount_input_keyboard(crypto.lower(), "crypto_to_rub"),
            parse_mode="HTML"
        )
        
        await state.set_state(ExchangeStates.waiting_for_amount)

@router.callback_query(F.data.startswith("amount_"))
async def amount_selected(callback: CallbackQuery, state: FSMContext):
    if "back" in callback.data:
        data = await state.get_data()
        operation = data.get("operation", "buy")
        if operation == "buy":
            await buy_handler(callback.message, state)
        else:
            await sell_handler(callback.message, state)
        return
    
    if "main_menu" in callback.data:
        await show_main_menu(callback, is_callback=True)
        return
    
    parts = callback.data.split("_")
    crypto = parts[1].upper()
    direction = "_".join(parts[2:-1])
    amount = float(parts[-1])
    
    await process_amount_and_show_calculation(callback, state, crypto, direction, amount)

@router.callback_query(F.data == "back_to_buy_selection")
async def back_to_buy_selection(callback: CallbackQuery, state: FSMContext):
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å."
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboards.buy_crypto_selection()
    )

@router.callback_query(F.data == "back_to_sell_selection")
async def back_to_sell_selection(callback: CallbackQuery, state: FSMContext):
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å."
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboards.sell_crypto_selection()
    )

@router.message(ExchangeStates.waiting_for_amount)
async def manual_amount_input(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await show_main_menu(message)
        return
    
    data = await state.get_data()
    
    if not data.get("direction"):
        min_amount = await db.get_setting("min_amount", config.MIN_AMOUNT)
        max_amount = await db.get_setting("max_amount", config.MAX_AMOUNT)
        
        try:
            exchange_type = data.get('exchange_type')
            if exchange_type == "rub":
                amount = float(message.text.replace(' ', '').replace(',', '.'))
                if amount < min_amount or amount > max_amount:
                    await message.answer(
                        f"‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {min_amount:,} –¥–æ {max_amount:,} —Ä—É–±–ª–µ–π"
                    )
                    return
                await state.update_data(rub_amount=amount)
            else:
                btc_amount = float(message.text.replace(',', '.'))
                if btc_amount <= 0 or btc_amount > 10:
                    await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Bitcoin")
                    return
                await state.update_data(btc_amount=btc_amount)
        except ValueError:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            return
        
        await message.answer(
            "‚Çø <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Bitcoin –∞–¥—Ä–µ—Å</b>\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–¥—Ä–µ—Å —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n"
            "Bitcoin –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–º–µ–Ω–Ω–æ –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å.",
            reply_markup=ReplyKeyboards.back_to_main(),
            parse_mode="HTML"
        )
        await state.set_state(ExchangeStates.waiting_for_btc_address)
        return
    
    try:
        amount = float(message.text.replace(' ', '').replace(',', '.'))
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        
        crypto = data.get("crypto")
        direction = data.get("direction")
        
        await process_amount_and_show_calculation_for_message(
            message, state, crypto, direction, amount
        )
        
    except (ValueError, TypeError):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

async def process_amount_and_show_calculation(callback: CallbackQuery, state: FSMContext, 
                                            crypto: str, direction: str, amount: float):
    btc_rate = await BitcoinAPI.get_btc_rate()
    
    if direction == "rub_to_crypto":
        rub_amount = amount
        crypto_amount = BitcoinAPI.calculate_btc_amount(rub_amount, btc_rate)
    else:
        crypto_amount = amount
        rub_amount = crypto_amount * btc_rate
    
    admin_percentage = await db.get_setting("admin_percentage", config.ADMIN_PERCENTAGE)
    processing_fee = rub_amount * 0.10
    admin_fee = (rub_amount + processing_fee) * (admin_percentage / 100)
    total_amount = rub_amount + processing_fee + admin_fee
    
    await state.update_data(
        crypto=crypto,
        direction=direction,
        rub_amount=rub_amount,
        crypto_amount=crypto_amount,
        rate=btc_rate,
        processing_fee=processing_fee,
        admin_fee=admin_fee,
        total_amount=total_amount
    )
    
    operation_text = "–ü–æ–∫—É–ø–∫–∞" if direction == "rub_to_crypto" else "–ü—Ä–æ–¥–∞–∂–∞"
    
    text = (
        f"üìä <b>{operation_text} Bitcoin</b>\n\n"
        f"üí± –ö—É—Ä—Å: {btc_rate:,.0f} ‚ÇΩ\n"
        f"üí∞ –°—É–º–º–∞: {rub_amount:,.0f} ‚ÇΩ\n"
        f"‚Çø –ü–æ–ª—É—á–∏—Ç–µ: {crypto_amount:.8f} BTC\n\n"
        f"üí≥ –ö–æ–º–∏—Å—Å–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞: {processing_fee:,.0f} ‚ÇΩ\n"
        f"üèõ –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: {admin_fee:,.0f} ‚ÇΩ\n"
        f"üí∏ <b>–ò—Ç–æ–≥–æ: {total_amount:,.0f} ‚ÇΩ</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± {'–æ–ø–ª–∞—Ç—ã' if direction == 'rub_to_crypto' else '–ø–æ–ª—É—á–µ–Ω–∏—è'}:"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboards.payment_methods_for_crypto(
            crypto.lower(), str(amount), direction
        ),
        parse_mode="HTML"
    )

async def process_amount_and_show_calculation_for_message(message: Message, state: FSMContext,
                                                        crypto: str, direction: str, amount: float):
    btc_rate = await BitcoinAPI.get_btc_rate()
    
    if direction == "rub_to_crypto":
        rub_amount = amount
        crypto_amount = BitcoinAPI.calculate_btc_amount(rub_amount, btc_rate)
    else:
        crypto_amount = amount
        rub_amount = crypto_amount * btc_rate
    
    admin_percentage = await db.get_setting("admin_percentage", config.ADMIN_PERCENTAGE)
    processing_fee = rub_amount * 0.10
    admin_fee = (rub_amount + processing_fee) * (admin_percentage / 100)
    total_amount = rub_amount + processing_fee + admin_fee
    
    await state.update_data(
        crypto=crypto,
        direction=direction,
        rub_amount=rub_amount,
        crypto_amount=crypto_amount,
        rate=btc_rate,
        processing_fee=processing_fee,
        admin_fee=admin_fee,
        total_amount=total_amount
    )
    
    operation_text = "–ü–æ–∫—É–ø–∫–∞" if direction == "rub_to_crypto" else "–ü—Ä–æ–¥–∞–∂–∞"
    
    text = (
        f"üìä <b>{operation_text} Bitcoin</b>\n\n"
        f"üí± –ö—É—Ä—Å: {btc_rate:,.0f} ‚ÇΩ\n"
        f"üí∞ –°—É–º–º–∞: {rub_amount:,.0f} ‚ÇΩ\n"
        f"‚Çø –ü–æ–ª—É—á–∏—Ç–µ: {crypto_amount:.8f} BTC\n\n"
        f"üí≥ –ö–æ–º–∏—Å—Å–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞: {processing_fee:,.0f} ‚ÇΩ\n"
        f"üèõ –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: {admin_fee:,.0f} ‚ÇΩ\n"
        f"üí∏ <b>–ò—Ç–æ–≥–æ: {total_amount:,.0f} ‚ÇΩ</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± {'–æ–ø–ª–∞—Ç—ã' if direction == 'rub_to_crypto' else '–ø–æ–ª—É—á–µ–Ω–∏—è'}:"
    )
    
    await message.answer(
        text,
        reply_markup=InlineKeyboards.payment_methods_for_crypto(
            crypto.lower(), str(amount), direction
        ),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("payment_"))
async def payment_method_selected(callback: CallbackQuery, state: FSMContext):
    if "back" in callback.data:
        data = await state.get_data()
        crypto = data.get("crypto")
        direction = data.get("direction")
        
        await callback.message.edit_text(
            f"–í–≤–µ–¥–∏—Ç–µ {'—Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö' if direction == 'rub_to_crypto' else '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC'}:",
            reply_markup=InlineKeyboards.amount_input_keyboard(crypto.lower(), direction)
        )
        return
    
    if "main_menu" in callback.data:
        await show_main_menu(callback, is_callback=True)
        return
    
    parts = callback.data.split("_")
    crypto = parts[1].upper()
    direction = "_".join(parts[2:-2])
    amount = parts[-2]
    payment_type = parts[-1]
    
    await state.update_data(payment_type=payment_type)
    
    if direction == "rub_to_crypto":
        text = (
            f"‚Çø <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Bitcoin –∞–¥—Ä–µ—Å</b>\n\n"
            f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–¥—Ä–µ—Å —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n"
            f"Bitcoin –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–º–µ–Ω–Ω–æ –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å."
        )
    else:
        text = (
            f"üí≥ <b>–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è</b>\n\n"
            f"{'–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã' if payment_type == 'card' else '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –°–ë–ü'}:"
        )
    
    await callback.message.edit_text(text, parse_mode="HTML")
    await state.set_state(ExchangeStates.waiting_for_address)

@router.message(ExchangeStates.waiting_for_btc_address)
async def btc_address_handler(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await show_main_menu(message)
        return
    
    btc_address = message.text.strip()
    
    if not BitcoinAPI.validate_btc_address(btc_address):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Bitcoin –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    data = await state.get_data()
    exchange_type = data['exchange_type']
    
    btc_rate = await BitcoinAPI.get_btc_rate()
    if not btc_rate:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    if exchange_type == "rub":
        rub_amount = data['rub_amount']
        btc_amount = BitcoinAPI.calculate_btc_amount(rub_amount, btc_rate)
    else:
        btc_amount = data['btc_amount']
        rub_amount = btc_amount * btc_rate
    
    processing_percentage = 10.0
    admin_percentage = await db.get_setting("admin_percentage", config.ADMIN_PERCENTAGE)
    
    processing_fee, admin_fee, total_amount = BitcoinAPI.calculate_fees(
        rub_amount, processing_percentage, admin_percentage
    )
    
    text = (
        f"üìä <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç:</b>\n\n"
        f"üí± –ö—É—Ä—Å BTC: {btc_rate:,.0f} ‚ÇΩ\n"
        f"üí∞ –°—É–º–º–∞ –∫ –æ–±–º–µ–Ω—É: {rub_amount:,.0f} ‚ÇΩ\n"
        f"‚Çø –ü–æ–ª—É—á–∏—Ç–µ Bitcoin: {btc_amount:.8f} BTC\n\n"
        f"üí≥ –ö–æ–º–∏—Å—Å–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞: {processing_fee:,.0f} ‚ÇΩ\n"
        f"üèõ –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: {admin_fee:,.0f} ‚ÇΩ\n"
        f"üí∏ <b>–ö –æ–ø–ª–∞—Ç–µ: {total_amount:,.0f} ‚ÇΩ</b>\n\n"
        f"‚Çø Bitcoin –∞–¥—Ä–µ—Å:\n<code>{btc_address}</code>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
    )
    
    await state.update_data(
        btc_address=btc_address,
        rub_amount=rub_amount,
        btc_amount=btc_amount,
        btc_rate=btc_rate,
        processing_fee=processing_fee,
        admin_fee=admin_fee,
        total_amount=total_amount
    )
    
    await message.answer(text, reply_markup=ReplyKeyboards.payment_methods(), parse_mode="HTML")

@router.message(ExchangeStates.waiting_for_address)
async def address_input_handler(message: Message, state: FSMContext):
    address = message.text.strip()
    
    data = await state.get_data()
    direction = data.get("direction")
    crypto = data.get("crypto")
    
    if direction == "rub_to_crypto":
        if not BitcoinAPI.validate_btc_address(address):
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Bitcoin –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
    else:
        if len(address) < 10:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
    
    await state.update_data(address=address)
    
    order_id = await create_exchange_order(message.from_user.id, state)
    
    await show_order_confirmation(message, state, order_id)

async def create_exchange_order(user_id: int, state: FSMContext) -> int:
    data = await state.get_data()
    
    order_id = await db.create_order(
        user_id=user_id,
        amount_rub=data["rub_amount"],
        amount_btc=data["crypto_amount"],
        btc_address=data["address"],
        rate=data["rate"],
        processing_fee=data["processing_fee"],
        admin_fee=data["admin_fee"],
        total_amount=data["total_amount"],
        payment_type=data["payment_type"]
    )
    
    return order_id

async def show_order_confirmation(message: Message, state: FSMContext, order_id: int):
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è personal_id
    order = await db.get_order(order_id)
    display_id = order.get('personal_id', order_id) if order else order_id
    
    operation_text = "–ü–æ–∫—É–ø–∫–∞" if data["direction"] == "rub_to_crypto" else "–ü—Ä–æ–¥–∞–∂–∞"
    
    text = (
        f"‚úÖ <b>–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º display_id
        f"üìã <b>{operation_text} Bitcoin</b>\n"
        f"üí∞ –°—É–º–º–∞: {data['rub_amount']:,.0f} ‚ÇΩ\n"
        f"‚Çø –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['crypto_amount']:.8f} BTC\n"
        f"üí∏ –ö {'–æ–ø–ª–∞—Ç–µ' if data['direction'] == 'rub_to_crypto' else '–ø–æ–ª—É—á–µ–Ω–∏—é'}: {data['total_amount']:,.0f} ‚ÇΩ\n\n"
        f"üìù –ê–¥—Ä–µ—Å/–†–µ–∫–≤–∏–∑–∏—Ç—ã:\n<code>{data['address']}</code>\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:"
    )
    
    await message.answer(
        text,
        reply_markup=InlineKeyboards.order_confirmation(order_id),
        parse_mode="HTML"
    )
    
    
    await state.clear()


@router.callback_query(F.data.startswith(("confirm_order_", "cancel_order_")))
async def order_confirmation_handler(callback: CallbackQuery, state: FSMContext):
    action = "confirm" if callback.data.startswith("confirm") else "cancel"
    order_id = int(callback.data.split("_")[-1])
    
    if action == "confirm":
        order = await db.get_order(order_id)
        if not order:
            await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º personal_id –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_id = order.get('personal_id', order_id)
        
        if order['total_amount'] and order['payment_type']:
            api_response = await onlypays_api.create_order(
                amount=int(order['total_amount']),
                payment_type=order['payment_type'],
                personal_id=str(order_id)  # –ü–µ—Ä–µ–¥–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –∫–∞–∫ personal_id
            )
            
            if not api_response.get('success'):
                await callback.message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {api_response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
                
                await asyncio.sleep(3)
                await callback.bot.send_message(
                    callback.message.chat.id,
                    "üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                    reply_markup=ReplyKeyboards.main_menu()
                )
                return
            
            payment_data = api_response['data']
            requisites_text = ""
            if order['payment_type'] == "card":
                requisites_text = (
                    f"üí≥ –ö–∞—Ä—Ç–∞: {payment_data['requisite']}\n"
                    f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {payment_data['owner']}\n"
                    f"üèõ –ë–∞–Ω–∫: {payment_data['bank']}"
                )
            else:
                requisites_text = (
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {payment_data['requisite']}\n"
                    f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {payment_data['owner']}\n"
                    f"üèõ –ë–∞–Ω–∫: {payment_data['bank']}"
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º OnlyPays ID –∫–∞–∫ personal_id
            await db.update_order(
                order_id,
                onlypays_id=api_response['data']['id'],
                requisites=requisites_text,
                status='waiting',
                personal_id=api_response['data']['id']  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É
            )
            
            text = (
                f"üí≥ <b>–ó–∞—è–≤–∫–∞ #{api_response['data']['id']} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
                f"üí∞ –ö –æ–ø–ª–∞—Ç–µ: <b>{order['total_amount']:,.0f} ‚ÇΩ</b>\n\n"
                f"üìã <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n"
                f"{requisites_text}\n\n"
                f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
                f"‚Ä¢ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É\n"
                f"‚Ä¢ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
                f"‚Ä¢ Bitcoin –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
                f"‚è∞ –ó–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 30 –º–∏–Ω—É—Ç"
            )
        else:
            text = (
                f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{display_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
                f"–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã.\n"
                f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 5-15 –º–∏–Ω—É—Ç."
            )
    else:
        await db.update_order(order_id, status='cancelled')
        order = await db.get_order(order_id)
        display_id = order.get('personal_id', order_id) if order else order_id
        text = f"‚ùå –ó–∞—è–≤–∫–∞ #{display_id} –æ—Ç–º–µ–Ω–µ–Ω–∞."
    
    await callback.message.edit_text(text, parse_mode="HTML")
    
    await asyncio.sleep(3)
    await callback.bot.send_message(
        callback.message.chat.id,
        "üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=ReplyKeyboards.main_menu()
    )

@router.message(F.text.in_(["üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", "üì± –°–ë–ü"]))
async def payment_method_handler(message: Message, state: FSMContext):
    payment_type = "card" if "–∫–∞—Ä—Ç–∞" in message.text else "sbp"
    data = await state.get_data()
    
    order_id = await db.create_order(
        user_id=message.from_user.id,
        amount_rub=data['rub_amount'],
        amount_btc=data['btc_amount'],
        btc_address=data.get('btc_address', data.get('address', '')),
        rate=data['btc_rate'],
        processing_fee=data['processing_fee'],
        admin_fee=data['admin_fee'],
        total_amount=data['total_amount'],
        payment_type=payment_type
    )
    
    api_response = await onlypays_api.create_order(
        amount=int(data['total_amount']),
        payment_type=payment_type,
        personal_id=str(order_id)
    )
    
    if not api_response.get('success'):
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {api_response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=ReplyKeyboards.main_menu()
        )
        return
    
    payment_data = api_response['data']
    requisites_text = ""
    if payment_type == "card":
        requisites_text = (
            f"üí≥ –ö–∞—Ä—Ç–∞: {payment_data['requisite']}\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {payment_data['owner']}\n"
            f"üèõ –ë–∞–Ω–∫: {payment_data['bank']}"
        )
    else:
        requisites_text = (
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {payment_data['requisite']}\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {payment_data['owner']}\n"
            f"üèõ –ë–∞–Ω–∫: {payment_data['bank']}"
        )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É —Å personal_id –æ—Ç OnlyPays
    await db.update_order(
        order_id,
        onlypays_id=api_response['data']['id'],
        requisites=requisites_text,
        personal_id=api_response['data']['id'] 
    )
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º personal_id –≤ —Ç–µ–∫—Å—Ç–µ
    text = (
        f"üí≥ <b>–ó–∞—è–≤–∫–∞ #{api_response['data']['id']} —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º OnlyPays ID
        f"üí∞ –ö –æ–ø–ª–∞—Ç–µ: <b>{data['total_amount']:,.0f} ‚ÇΩ</b>\n\n"
        f"üìã <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n"
        f"{requisites_text}\n\n"
        f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
        f"‚Ä¢ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
        f"‚Ä¢ Bitcoin –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
        f"‚è∞ –ó–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 30 –º–∏–Ω—É—Ç"
    )
    
    await message.answer(
        text, 
        reply_markup=ReplyKeyboards.order_menu(),
        parse_mode="HTML"
    )
    
    await state.clear()

@router.message(F.text == "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
async def check_status_handler(message: Message):
    orders = await db.get_user_orders(message.from_user.id, 1)
    
    if not orders:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫",
            reply_markup=ReplyKeyboards.main_menu()
        )
        return
    
    order = orders[0]
    
    if order['onlypays_id'] and order['status'] == 'waiting':
        api_response = await onlypays_api.get_order_status(order['onlypays_id'])
        
        if api_response.get('success'):
            status_data = api_response['data']
            if status_data['status'] == 'finished':
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –≤—ã–∑—ã–≤–∞–µ–º webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                await process_onlypays_webhook({
                    'id': order['onlypays_id'],
                    'status': 'finished',
                    'personal_id': str(order['id']),
                    'received_sum': status_data.get('received_sum', order['total_amount'])
                }, message.bot)  # –î–æ–±–∞–≤–ª—è–µ–º bot –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
                
                await message.answer(
                    f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order.get('personal_id', order['id'])} –æ–ø–ª–∞—á–µ–Ω–∞!</b>\n\n"
                    f"–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.\n"
                    f"Bitcoin –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.",
                    reply_markup=ReplyKeyboards.main_menu(),
                    parse_mode="HTML"
                )
            elif status_data['status'] == 'cancelled':
                await db.update_order(order['id'], status='cancelled')
                await message.answer(
                    f"‚ùå –ó–∞—è–≤–∫–∞ #{order.get('personal_id', order['id'])} –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
                    f"–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –¥–ª—è –æ–±–º–µ–Ω–∞.",
                    reply_markup=ReplyKeyboards.main_menu(),
                    parse_mode="HTML"
                )
            else:
                await message.answer(
                    f"‚è≥ –ó–∞—è–≤–∫–∞ #{order.get('personal_id', order['id'])} –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ\n\n"
                    f"–û–∂–∏–¥–∞–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞...\n"
                    f"–ó–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 30 –º–∏–Ω—É—Ç.",
                    reply_markup=ReplyKeyboards.order_menu()
                )
        else:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {api_response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=ReplyKeyboards.main_menu()
            )
    else:
        status_text = {
            'waiting': '‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
            'paid_by_client': 'üí∞ –û–ø–ª–∞—á–µ–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è',
            'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
            'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞',
            'problem': '‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω–∞—è'
        }.get(order['status'], f"‚ùì {order['status']}")
        
        await message.answer(
            f"üìã –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{order.get('personal_id', order['id'])}: {status_text}",
            reply_markup=ReplyKeyboards.main_menu()
        )

@router.message(F.text.in_(["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É"]))
async def confirm_cancel_order_handler(message: Message):
    orders = await db.get_user_orders(message.from_user.id, 1)
    
    if not orders:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫",
            reply_markup=ReplyKeyboards.main_menu()
        )
        return
    
    order = orders[0]
    display_id = order.get('personal_id', order['id'])  # –ü–æ–ª—É—á–∞–µ–º display_id
    
    if "–û—Ç–º–µ–Ω–∏—Ç—å" in message.text:
        if order['status'] == 'waiting' and order['onlypays_id']:
            api_response = await onlypays_api.cancel_order(order['onlypays_id'])
            
            if api_response.get('success'):
                await db.update_order(order['id'], status='cancelled')
                await message.answer(
                    f"‚ùå –ó–∞—è–≤–∫–∞ #{display_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º display_id
                    "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –¥–ª—è –æ–±–º–µ–Ω–∞.",
                    reply_markup=ReplyKeyboards.main_menu()
                )
            else:
                await message.answer(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏: {api_response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    reply_markup=ReplyKeyboards.main_menu()
                )
        else:
            await message.answer(
                "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É",
                reply_markup=ReplyKeyboards.main_menu()
            )
    else:
        await message.answer(
            "‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏...",
            reply_markup=ReplyKeyboards.order_menu()
        )
        await check_status_handler(message)

@router.message(F.text == "–û —Å–µ—Ä–≤–∏—Å–µ ‚ÑπÔ∏è")
async def about_handler(message: Message):
    btc_rate = await BitcoinAPI.get_btc_rate()
    admin_percentage = await db.get_setting("admin_percentage", config.ADMIN_PERCENTAGE)
    
    text = (
        f"üëë {config.EXCHANGE_NAME} üëë\n\n"
        f"üî∑ –ù–ê–®–ò –ü–†–ò–û–†–ò–¢–ï–¢–´ üî∑\n"
        f"üî∏ 100% –ì–ê–†–ê–ù–¢–ò–ò\n"
        f"üî∏ –ë–´–°–¢–†–´–ô –û–ë–ú–ï–ù\n"
        f"üî∏ –ù–ê–î–ï–ñ–ù–´–ô –°–ï–†–í–ò–°\n"
        f"üî∏ –ö–ê–ß–ï–°–¢–í–ï–ù–ù–ê–Ø –†–ê–ë–û–¢–ê\n"
        f"üî∏ –ê–ù–û–ù–ò–ú–ù–´–ô –û–ë–ú–ï–ù\n\n"
        f"üî∑ –ù–ê–®–ò –ö–û–ù–¢–ê–ö–¢–´ üî∑\n"
        f"‚öôÔ∏è –û–ü–ï–†–ê–¢–û–† –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚ûñ {config.SUPPORT_MANAGER}\n"
        f"üì£ –ù–û–í–û–°–¢–ù–û–ô –ö–ê–ù–ê–õ ‚ûñ {config.NEWS_CHANNEL}\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üí± –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å BTC: {btc_rate:,.0f} ‚ÇΩ\n"
        f"üí≥ –ö–æ–º–∏—Å—Å–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞: 10%\n"
        f"üèõ –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: {admin_percentage}%\n\n"
        f"üí∞ –õ–∏–º–∏—Ç—ã: {config.MIN_AMOUNT:,} - {config.MAX_AMOUNT:,} ‚ÇΩ"
    )
    
    await message.answer(text, reply_markup=ReplyKeyboards.main_menu(), parse_mode="HTML")

@router.message(F.text == "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤–∞–ª—é—Ç")
async def calculator_handler(message: Message, state: FSMContext):
    await state.clear()
    
    text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>"
    
    await message.answer(
        text,
        reply_markup=InlineKeyboards.currency_calculator(),
        parse_mode="HTML"
    )

@router.message(F.text == "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def review_handler(message: Message, state: FSMContext):
    await message.answer(
        "üìù <b>–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ —Å–µ—Ä–≤–∏—Å–∞.\n"
        "–ú—ã —Ü–µ–Ω–∏–º –ª—é–±—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!",
        reply_markup=ReplyKeyboards.back_to_main(),
        parse_mode="HTML"
    )
    await state.set_state(ExchangeStates.waiting_for_contact)

@router.message(F.text == "–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –æ–±–º–µ–Ω?")
async def how_to_exchange_handler(message: Message):
    text = (
        "üìò <b>–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –æ–±–º–µ–Ω?</b>\n\n"
        "üìπ –í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: \n\n"
    )
    
    await message.answer(text, reply_markup=ReplyKeyboards.main_menu(), parse_mode="HTML")

@router.message(F.text == "–î—Ä—É–∑—å—è")
async def referral_handler(message: Message):
    try:
        user = await db.get_user(message.from_user.id)
        if not user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            await db.add_user(
                message.from_user.id,
                message.from_user.username,
                message.from_user.first_name,
                message.from_user.last_name
            )
            user = await db.get_user(message.from_user.id)
        
        if not user:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å /start",
                reply_markup=ReplyKeyboards.main_menu()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        try:
            stats = await db.get_referral_stats(message.from_user.id)
        except:
            # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = {
                'referral_count': 0,
                'referral_balance': 0
            }
        
        text = (
            f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
            f"üéÅ <b>–í–∞—à–∏ –±–æ–Ω—É—Å—ã:</b>\n"
            f"‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞: 100 ‚ÇΩ\n"
            f"‚Ä¢ –û—Ç –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏ –¥—Ä—É–≥–∞: 2%\n\n"
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"üë§ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {stats['referral_count']} —á–µ–ª.\n"
            f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤: {stats['referral_balance']} ‚ÇΩ\n\n"
            f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
            f"<code>https://t.me/{config.BOT_USERNAME}?start=r-{message.from_user.id}</code>\n\n"
            f"üì§ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º!</b>\n"
            f"–ö–æ–≥–¥–∞ –æ–Ω–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –∏ —Å–¥–µ–ª–∞—é—Ç –æ–±–º–µ–Ω, "
            f"–≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å—ã!"
        )
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", 
                url=f"https://t.me/share/url?url=https://t.me/{config.BOT_USERNAME}?start=r-{message.from_user.id}&text=–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –ª—É—á—à–µ–º—É –∫—Ä–∏–ø—Ç–æ–æ–±–º–µ–Ω–Ω–∏–∫—É {config.EXCHANGE_NAME}!"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–∞—è", 
                callback_data="referral_main_menu"
            )
        )
        
        await message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Referral handler error: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start",
            reply_markup=ReplyKeyboards.main_menu()
        )









@router.callback_query(F.data == "referral_history")
async def referral_history_handler(callback: CallbackQuery):
    await callback.answer("–ò—Å—Ç–æ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç–∞")

@router.callback_query(F.data == "referral_main_menu")
async def referral_main_menu_handler(callback: CallbackQuery):
    await show_main_menu(callback, is_callback=True)

@router.message(F.text == "‚ÇΩ ‚Üí ‚Çø –†—É–±–ª–∏ –≤ Bitcoin")
async def rub_to_btc_handler(message: Message, state: FSMContext):
    await state.update_data(exchange_type="rub")
    
    min_amount = await db.get_setting("min_amount", config.MIN_AMOUNT)
    max_amount = await db.get_setting("max_amount", config.MAX_AMOUNT)
    
    text = (
        f"üí∞ <b>–û–±–º–µ–Ω —Ä—É–±–ª–µ–π –Ω–∞ Bitcoin</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö:\n\n"
        f"–ú–∏–Ω–∏–º—É–º: {min_amount:,} ‚ÇΩ\n"
        f"–ú–∞–∫—Å–∏–º—É–º: {max_amount:,} ‚ÇΩ"
    )
    
    await message.answer(text, reply_markup=ReplyKeyboards.back_to_main(), parse_mode="HTML")
    await state.set_state(ExchangeStates.waiting_for_amount)

@router.message(F.text == "‚Çø ‚Üí ‚ÇΩ Bitcoin –≤ —Ä—É–±–ª–∏")
async def btc_to_rub_handler(message: Message, state: FSMContext):
    text = (
        f"‚Çø <b>–û–±–º–µ–Ω Bitcoin –Ω–∞ —Ä—É–±–ª–∏</b>\n\n"
    )
    
    await message.answer(text, reply_markup=ReplyKeyboards.main_menu(), parse_mode="HTML")

@router.message(F.text == "üìä –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def my_orders_handler(message: Message):
    orders = await db.get_user_orders(message.from_user.id, 5)
    
    if not orders:
        text = (
            "üìã <b>–í–∞—à–∏ –∑–∞—è–≤–∫–∏</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –æ–±–º–µ–Ω!"
        )
    else:
        text = "üìã <b>–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:</b>\n\n"
        for order in orders:
            status_emoji = "‚è≥" if order['status'] == 'waiting' else "‚úÖ" if order['status'] == 'finished' else "‚ùå"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º personal_id –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID
            display_id = order.get('personal_id', order['id'])
            
            text += (
                f"{status_emoji} –ó–∞—è–≤–∫–∞ #{display_id}\n"
                f"üí∞ {order['total_amount']:,.0f} ‚ÇΩ ‚Üí {order['amount_btc']:.6f} BTC\n"
                f"üìÖ {order['created_at'][:16]}\n\n"
            )
    
    await message.answer(text, reply_markup=ReplyKeyboards.main_menu(), parse_mode="HTML")

@router.message(F.text == "üìà –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")
async def rates_handler(message: Message):
    try:
        btc_rate = await BitcoinAPI.get_btc_rate()
        
        text = (
            f"üìà <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã</b>\n\n"
            f"‚Çø Bitcoin: {btc_rate:,.0f} ‚ÇΩ\n\n"
            f"üí° –ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"
        )
    except:
        text = (
            f"üìà <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã</b>\n\n"
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞\n\n"
            f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        )
    
    await message.answer(text, reply_markup=ReplyKeyboards.main_menu(), parse_mode="HTML")

@router.message(F.text == "‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu_handler(message: Message, state: FSMContext):
    await state.clear()
    await show_main_menu(message)

@router.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def back_handler(message: Message, state: FSMContext):
    await message.answer(
        "üí∞ <b>–ü–æ–∫—É–ø–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞:",
        reply_markup=ReplyKeyboards.exchange_menu(),
        parse_mode="HTML"
    )

@router.message(ExchangeStates.waiting_for_contact)
async def contact_handler(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await show_main_menu(message)
        return
    
    user_id = message.from_user.id
    
    try:
        last_review = await db.get_last_review_time(user_id)
        current_time = message.date.replace(tzinfo=None)
        
        if last_review:
            time_diff = current_time - last_review
            cooldown_hours = 24
            
            if time_diff.total_seconds() < cooldown_hours * 3600:
                remaining = cooldown_hours * 3600 - time_diff.total_seconds()
                hours_left = int(remaining // 3600)
                minutes_left = int((remaining % 3600) // 60)
                
                await message.answer(
                    f"‚è∞ <b>–û—Ç–∑—ã–≤ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏</b>\n\n"
                    f"–í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–∑—ã–≤–∞: {hours_left}—á {minutes_left}–º",
                    reply_markup=ReplyKeyboards.main_menu(),
                    parse_mode="HTML"
                )
                await state.clear()
                return
        
        if len(message.text) < 10:
            await message.answer(
                f"üìù <b>–û—Ç–∑—ã–≤ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π</b>\n\n"
                f"–ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤, —É –≤–∞—Å: {len(message.text)}",
                parse_mode="HTML"
            )
            return
        
        if len(message.text) > 1000:
            await message.answer(
                f"üìù <b>–û—Ç–∑—ã–≤ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π</b>\n\n"
                f"–ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤, —É –≤–∞—Å: {len(message.text)}",
                parse_mode="HTML"
            )
            return
        
        user = await db.get_user(user_id)
        review_text = (
            f"üìù <b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤</b>\n\n"
            f"üìÖ {current_time.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üí¨ <b>–¢–µ–∫—Å—Ç:</b>\n{message.text}"
        )
        
        review_id = await db.save_review(user_id, message.text)
        
        if config.ADMIN_CHAT_ID:
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            from aiogram.types import InlineKeyboardButton
            
            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"review_approve_{review_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"review_reject_{review_id}")
            )
            
            await message.bot.send_message(
                config.ADMIN_CHAT_ID,
                review_text,
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
        
        await message.answer(
            "‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!</b>\n\n"
            "–û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.",
            reply_markup=ReplyKeyboards.main_menu(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Review error: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboards.main_menu()
        )
    
    await state.clear()








# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
@router.callback_query(F.data.startswith("op_sent_"))
async def operator_sent_handler(callback: CallbackQuery):
    """–û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª Bitcoin"""
    order_id = int(callback.data.split("_")[-1])
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        await db.update_order(order_id, status='completed')
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        order = await db.get_order(order_id)
        if not order:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        display_id = order.get('personal_id', order_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        text_client = (
            f"üéâ <b>–ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"‚Çø –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {order['amount_btc']:.8f} BTC\n"
            f"üìç –ù–∞ –∞–¥—Ä–µ—Å: <code>{order['btc_address']}</code>\n\n"
            f"‚úÖ <b>Bitcoin —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∫–æ—à–µ–ª–µ–∫.\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ {config.EXCHANGE_NAME}!"
        )
        
        await callback.bot.send_message(
            order['user_id'],
            text_client,
            parse_mode="HTML",
            reply_markup=ReplyKeyboards.main_menu()
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        await callback.message.edit_text(
            f"‚úÖ <b>–ó–ê–Ø–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"üë§ –û–±—Ä–∞–±–æ—Ç–∞–ª: @{callback.from_user.username or callback.from_user.first_name}\n"
            f"‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üíé Bitcoin –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É!",
            parse_mode="HTML"
        )
        
        await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è")
        
    except Exception as e:
        logger.error(f"Operator sent handler error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")

@router.callback_query(F.data.startswith("op_problem_"))
async def operator_problem_handler(callback: CallbackQuery):
    """–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–∞–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ"""
    order_id = int(callback.data.split("_")[-1])
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        await db.update_order(order_id, status='problem')
        
        order = await db.get_order(order_id)
        display_id = order.get('personal_id', order_id) if order else order_id
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
        admin_text = (
            f"‚ö†Ô∏è <b>–ü–†–û–ë–õ–ï–ú–ù–ê–Ø –ó–ê–Ø–í–ö–ê</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"üë§ –û–ø–µ—Ä–∞—Ç–æ—Ä: @{callback.from_user.username or callback.from_user.first_name}\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"‚ùó –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        )
        
        await callback.bot.send_message(
            config.ADMIN_CHAT_ID,
            admin_text,
            parse_mode="HTML"
        )
        
        await callback.answer("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω–∞—è")
        
    except Exception as e:
        logger.error(f"Operator problem handler error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("op_note_"))
async def operator_note_handler(callback: CallbackQuery, state: FSMContext):
    """–û–ø–µ—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É"""
    order_id = int(callback.data.split("_")[-1])
    
    await state.update_data(note_order_id=order_id)
    
    await callback.message.edit_text(
        f"üìù <b>–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∫ –∑–∞—è–≤–∫–µ #{order_id}</b>\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:",
        parse_mode="HTML"
    )
    
    await state.set_state(ExchangeStates.waiting_for_note)
    await callback.answer()

@router.message(ExchangeStates.waiting_for_note)
async def note_input_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–∞–º–µ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"""
    data = await state.get_data()
    order_id = data.get('note_order_id')
    
    if not order_id:
        await message.answer("–û—à–∏–±–∫–∞: ID –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    note_text = message.text
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –ë–î (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ notes –≤ —Ç–∞–±–ª–∏—Ü—É orders)
        order = await db.get_order(order_id)
        display_id = order.get('personal_id', order_id) if order else order_id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
        admin_text = (
            f"üìù <b>–ó–ê–ú–ï–¢–ö–ê –ö –ó–ê–Ø–í–ö–ï</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"üë§ –û–ø–µ—Ä–∞—Ç–æ—Ä: @{message.from_user.username or message.from_user.first_name}\n"
            f"üìù –ó–∞–º–µ—Ç–∫–∞: {note_text}\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        await message.bot.send_message(
            config.ADMIN_CHAT_ID,
            admin_text,
            parse_mode="HTML"
        )
        
        await message.answer(
            f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ –∫ –∑–∞—è–≤–∫–µ #{display_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
            reply_markup=ReplyKeyboards.main_menu()
        )
        
    except Exception as e:
        logger.error(f"Note handler error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏")
    
    await state.clear()
















@router.message()
async def unknown_handler(message: Message):
    await message.answer(
        "‚ùì –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=ReplyKeyboards.main_menu()
    )