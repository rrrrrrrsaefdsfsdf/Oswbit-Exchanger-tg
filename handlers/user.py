import logging
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, BufferedInputFile, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.models import Database
from keyboards.reply import ReplyKeyboards
from keyboards.inline import InlineKeyboards
from utils.bitcoin import BitcoinAPI
from utils.captcha import CaptchaGenerator
from api.onlypays import onlypays_api
from config import config

logger = logging.getLogger(__name__)
router = Router()

class ExchangeStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_btc_address = State()
    waiting_for_captcha = State()
    waiting_for_contact = State()

db = Database(config.DATABASE_URL)

async def show_main_menu(message_or_callback, is_callback=False):
    default_welcome = (
        f"üéâ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å, –¥–æ—Ä–æ–≥–∏–µ –¥—Ä—É–∑—å—è üéâ\n"
        f"üí∞ {config.EXCHANGE_NAME} üí∞\n\n"
        f"üü° BTC - BITCOIN\n\n"
        f"üî• –ù–ê–î–Å–ñ–ù–´–ô, –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ô –ò –ú–û–ú–ï–ù–¢–ê–õ–¨–ù–´–ô –û–ë–ú–ï–ù –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢ üî•\n\n"
        f"‚ö°Ô∏è –°–ê–ú–ê–Ø –ù–ò–ó–ö–ê–Ø –ö–û–ú–ò–°–°–ò–Ø\n"
        f"ü§ñ –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–±–º–µ–Ω 24/7\n"
        f"‚úÖ –ë—ã—Å—Ç—Ä–æ / –ù–∞–¥—ë–∂–Ω–æ / –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"ü§ù –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞:\n"
        f"üí¨ –ù–ê–® –ß–ê–¢ ‚ûñ {config.SUPPORT_CHAT}\n\n"
        f"üÜò –ù–∞—à–∞ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞:\n"
        f"üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä ‚ûñ {config.SUPPORT_MANAGER}\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üì¢ –ù–û–í–û–°–¢–ù–û–ô –ö–ê–ù–ê–õ ‚ûñ {config.NEWS_CHANNEL}\n"
        f"üìù –ö–ê–ù–ê–õ –û–¢–ó–´–í–´ ‚ûñ {config.REVIEWS_CHANNEL}\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üéÅ –ë–û–ù–£–°–´\n"
        f"üíé –ö–∞–∂–¥—ã–π 10 –æ–±–º–µ–Ω –¥–æ 6000‚ÇΩ –≤ –±–æ—Ç–µ –ë–ï–ó –ö–û–ú–ò–°–°–ò–ò\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:"
    )
    
    welcome_msg = await db.get_setting("welcome_message", default_welcome)
    
    if is_callback:
        await message_or_callback.bot.send_message(
            message_or_callback.message.chat.id,
            welcome_msg,
            reply_markup=ReplyKeyboards.main_menu()
        )
    else:
        await message_or_callback.answer(welcome_msg, reply_markup=ReplyKeyboards.main_menu())

@router.message(CommandStart())
async def start_handler(message: Message, state: FSMContext):
    await state.clear()
    
    user = await db.get_user(message.from_user.id)
    if not user:
        captcha_enabled = await db.get_setting("captcha_enabled", config.CAPTCHA_ENABLED)
        if captcha_enabled:
            image_buffer, answer = CaptchaGenerator.generate_image_captcha()
            await db.create_captcha_session(message.from_user.id, answer.upper())
            
            captcha_photo = BufferedInputFile(
                image_buffer.read(),
                filename="captcha.png"
            )
            
            await message.answer_photo(
                photo=captcha_photo,
                caption="ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏:",
                reply_markup=ReplyKeyboards.back_to_main()
            )
            await state.set_state(ExchangeStates.waiting_for_captcha)
            return
        else:
            await db.add_user(
                message.from_user.id,
                message.from_user.username,
                message.from_user.first_name,
                message.from_user.last_name
            )
    
    await show_main_menu(message)



@router.message(ExchangeStates.waiting_for_captcha)
async def captcha_handler(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ /start")
        return
        
    session = await db.get_captcha_session(message.from_user.id)
    if not session:
        await message.answer("–û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
        return
    
    user_answer = message.text.upper().strip()
    correct_answer = session['answer'].upper().strip()
    
    if user_answer == correct_answer:
        await db.delete_captcha_session(message.from_user.id)
        
        await db.add_user(
            message.from_user.id,
            message.from_user.username,
            message.from_user.first_name,
            message.from_user.last_name
        )
        
        data = await state.get_data()
        referral_user_id = data.get('referral_user_id')
        
        if referral_user_id and referral_user_id != message.from_user.id:
            await db.update_user(message.from_user.id, referred_by=referral_user_id)
            await db.update_referral_count(referral_user_id)
            
            try:
                await message.bot.send_message(
                    referral_user_id,
                    f"üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n"
                    f"üë§ {message.from_user.first_name}\n"
                    f"üí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!"
                )
            except:
                pass
        
        await message.answer("‚úÖ –í–µ—Ä–Ω–æ! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        await show_main_menu(message)
        await state.clear()
    else:
        attempts = session['attempts'] + 1
        if attempts >= 3:
            await db.delete_captcha_session(message.from_user.id)
            await message.answer("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start —Å–Ω–æ–≤–∞.")
            await state.clear()
        else:
            await db.execute_query(
                'UPDATE captcha_sessions SET attempts = ? WHERE user_id = ?',
                (attempts, message.from_user.id)
            )
            
            try:
                image_buffer, answer = CaptchaGenerator.generate_simple_image_captcha()
                await db.execute_query(
                    'UPDATE captcha_sessions SET answer = ? WHERE user_id = ?',
                    (answer.upper(), message.from_user.id)
                )
                
                captcha_photo = BufferedInputFile(
                    image_buffer.read(),
                    filename="captcha.png"
                )
                
                await message.answer_photo(
                    photo=captcha_photo,
                    caption=f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: {3-attempts}\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏:"
                )
            except:
                await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: {3-attempts}")

@router.message(F.text == "–ö—É–ø–∏—Ç—å")
async def buy_handler(message: Message, state: FSMContext):
    await state.clear()
    
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å."
    
    await message.answer(
        text,
        reply_markup=InlineKeyboards.buy_crypto_selection()
    )

@router.message(F.text == "–ü—Ä–æ–¥–∞—Ç—å")
async def sell_handler(message: Message, state: FSMContext):
    await state.clear()
    
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å."
    
    await message.answer(
        text,
        reply_markup=InlineKeyboards.sell_crypto_selection()
    )




@router.callback_query(F.data.startswith("buy_"))
async def buy_crypto_selected(callback: CallbackQuery, state: FSMContext):
    if callback.data == "buy_main_menu":
        await show_main_menu(callback, is_callback=True)
        return
    
    crypto = callback.data.replace("buy_", "").upper()
    
    if crypto == "BTC":
        text = (
            f"üí∞ <b>–ü–æ–∫—É–ø–∫–∞ Bitcoin</b>\n\n"
            f"üöß –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        )
    
    from aiogram.types import InlineKeyboardButton
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_buy_selection"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="buy_main_menu")
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )




@router.callback_query(F.data.startswith("sell_"))
async def sell_crypto_selected(callback: CallbackQuery, state: FSMContext):
    if callback.data == "sell_main_menu":
        await show_main_menu(callback, is_callback=True)
        return
    
    crypto = callback.data.replace("sell_", "").upper()
    
    if crypto == "BTC":
        text = (
            f"üí∏ <b>–ü—Ä–æ–¥–∞–∂–∞ Bitcoin</b>\n\n"
            f"üöß –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        )
    
    from aiogram.types import InlineKeyboardButton
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_sell_selection"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="sell_main_menu")
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "back_to_buy_selection")
async def back_to_buy_selection(callback: CallbackQuery, state: FSMContext):
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å."
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboards.buy_crypto_selection()
    )

@router.callback_query(F.data == "back_to_sell_selection")
async def back_to_sell_selection(callback: CallbackQuery, state: FSMContext):
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å."
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboards.sell_crypto_selection()
    )

@router.message(F.text == "–û —Å–µ—Ä–≤–∏—Å–µ ‚ÑπÔ∏è")
async def about_handler(message: Message):
    btc_rate = await BitcoinAPI.get_btc_rate()
    admin_percentage = await db.get_setting("admin_percentage", config.ADMIN_PERCENTAGE)
    
    text = (
        f"üëë {config.EXCHANGE_NAME} üëë\n\n"
        f"üî∑ –ù–ê–®–ò –ü–†–ò–û–†–ò–¢–ï–¢–´ üî∑\n"
        f"üî∏ 100% –ì–ê–†–ê–ù–¢–ò–ò\n"
        f"üî∏ –ë–´–°–¢–†–´–ô –û–ë–ú–ï–ù\n"
        f"üî∏ –ù–ê–î–ï–ñ–ù–´–ô –°–ï–†–í–ò–°\n"
        f"üî∏ –ö–ê–ß–ï–°–¢–í–ï–ù–ù–ê–Ø –†–ê–ë–û–¢–ê\n"
        f"üî∏ –ê–ù–û–ù–ò–ú–ù–´–ô –û–ë–ú–ï–ù\n\n"
        f"üî∑ –ù–ê–®–ò –ö–û–ù–¢–ê–ö–¢–´ üî∑\n"
        f"‚öôÔ∏è –û–ü–ï–†–ê–¢–û–† –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚ûñ {config.SUPPORT_MANAGER}\n"
        f"üì£ –ù–û–í–û–°–¢–ù–û–ô –ö–ê–ù–ê–õ ‚ûñ {config.NEWS_CHANNEL}\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üí± –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å BTC: {btc_rate:,.0f} ‚ÇΩ\n"
        f"üí≥ –ö–æ–º–∏—Å—Å–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞: 10%\n"
        f"üèõ –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: {admin_percentage}%\n\n"
        f"üí∞ –õ–∏–º–∏—Ç—ã: {config.MIN_AMOUNT:,} - {config.MAX_AMOUNT:,} ‚ÇΩ"
    )
    
    await message.answer(text, reply_markup=ReplyKeyboards.main_menu(), parse_mode="HTML")

@router.message(F.text == "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤–∞–ª—é—Ç")
async def calculator_handler(message: Message, state: FSMContext):
    await state.clear()
    
    text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>"
    
    await message.answer(
        text,
        reply_markup=InlineKeyboards.currency_calculator(),
        parse_mode="HTML"
    )

@router.message(F.text == "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def review_handler(message: Message, state: FSMContext):
    await message.answer(
        "üìù <b>–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ —Å–µ—Ä–≤–∏—Å–∞.\n"
        "–ú—ã —Ü–µ–Ω–∏–º –ª—é–±—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!",
        reply_markup=ReplyKeyboards.back_to_main(),
        parse_mode="HTML"
    )
    await state.set_state(ExchangeStates.waiting_for_contact)

@router.message(F.text == "–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –æ–±–º–µ–Ω?")
async def how_to_exchange_handler(message: Message):
    text = (
        "üìò <b>–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –æ–±–º–µ–Ω?</b>\n\n"
        "üìπ –í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: \n\n"
    )
    
    await message.answer(text, reply_markup=ReplyKeyboards.main_menu(), parse_mode="HTML")

@router.message(F.text == "–î—Ä—É–∑—å—è")
async def referral_handler(message: Message):
    user = await db.get_user(message.from_user.id)
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    stats = await db.get_referral_stats(message.from_user.id)
    
    text = (
        f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        f"üéÅ <b>–í–∞—à–∏ –±–æ–Ω—É—Å—ã:</b>\n"
        f"‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞: 100 ‚ÇΩ\n"
        f"‚Ä¢ –û—Ç –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏ –¥—Ä—É–≥–∞: 2%\n\n"
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üë§ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {stats['referral_count']} —á–µ–ª.\n"
        f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤: {stats['referral_balance']} ‚ÇΩ\n\n"
        f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
        f"<code>https://t.me/{config.BOT_USERNAME}?start=r-{message.from_user.id}</code>\n\n"
        f"üì§ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º!</b>\n"
        f"–ö–æ–≥–¥–∞ –æ–Ω–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –∏ —Å–¥–µ–ª–∞—é—Ç –æ–±–º–µ–Ω, "
        f"–≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å—ã!"
    )
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", 
            url=f"https://t.me/share/url?url=https://t.me/{config.BOT_USERNAME}?start=r-{message.from_user.id}&text=–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –ª—É—á—à–µ–º—É –∫—Ä–∏–ø—Ç–æ–æ–±–º–µ–Ω–Ω–∏–∫—É {config.EXCHANGE_NAME}!"
        )
    )
    builder.row(
        # InlineKeyboardButton(
        #     text="üí∞ –ò—Å—Ç–æ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤", 
        #     callback_data="referral_history"
        # )
    )
    builder.row(
        InlineKeyboardButton(
            text="üè† –ì–ª–∞–≤–Ω–∞—è", 
            callback_data="referral_main_menu"
        )
    )
    
    await message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")

@router.callback_query(F.data == "referral_history")
async def referral_history_handler(callback: CallbackQuery):
    await callback.answer("–ò—Å—Ç–æ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç–∞")

@router.callback_query(F.data == "referral_main_menu")
async def referral_main_menu_handler(callback: CallbackQuery):
    await show_main_menu(callback, is_callback=True)

@router.message(F.text == "‚ÇΩ ‚Üí ‚Çø –†—É–±–ª–∏ –≤ Bitcoin")
async def rub_to_btc_handler(message: Message, state: FSMContext):
    await state.update_data(exchange_type="rub")
    
    min_amount = await db.get_setting("min_amount", config.MIN_AMOUNT)
    max_amount = await db.get_setting("max_amount", config.MAX_AMOUNT)
    
    text = (
        f"üí∞ <b>–û–±–º–µ–Ω —Ä—É–±–ª–µ–π –Ω–∞ Bitcoin</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö:\n\n"
        f"–ú–∏–Ω–∏–º—É–º: {min_amount:,} ‚ÇΩ\n"
        f"–ú–∞–∫—Å–∏–º—É–º: {max_amount:,} ‚ÇΩ"
    )
    
    await message.answer(text, reply_markup=ReplyKeyboards.back_to_main(), parse_mode="HTML")
    await state.set_state(ExchangeStates.waiting_for_amount)

@router.message(F.text == "‚Çø ‚Üí ‚ÇΩ Bitcoin –≤ —Ä—É–±–ª–∏")
async def btc_to_rub_handler(message: Message, state: FSMContext):
    text = (
        f"‚Çø <b>–û–±–º–µ–Ω Bitcoin –Ω–∞ —Ä—É–±–ª–∏</b>\n\n"
    )
    
    await message.answer(text, reply_markup=ReplyKeyboards.main_menu(), parse_mode="HTML")

@router.message(F.text == "üìä –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def my_orders_handler(message: Message):
    orders = await db.get_user_orders(message.from_user.id, 5)
    
    if not orders:
        text = (
            "üìã <b>–í–∞—à–∏ –∑–∞—è–≤–∫–∏</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –æ–±–º–µ–Ω!"
        )
    else:
        text = "üìã <b>–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:</b>\n\n"
        for order in orders:
            status_emoji = "‚è≥" if order['status'] == 'waiting' else "‚úÖ" if order['status'] == 'finished' else "‚ùå"
            text += (
                f"{status_emoji} –ó–∞—è–≤–∫–∞ #{order['id']}\n"
                f"üí∞ {order['total_amount']:,.0f} ‚ÇΩ ‚Üí {order['amount_btc']:.6f} BTC\n"
                f"üìÖ {order['created_at'][:16]}\n\n"
            )
    
    await message.answer(text, reply_markup=ReplyKeyboards.main_menu(), parse_mode="HTML")

@router.message(F.text == "üìà –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")
async def rates_handler(message: Message):
    try:
        btc_rate = await BitcoinAPI.get_btc_rate()
        
        text = (
            f"üìà <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã</b>\n\n"
            f"‚Çø Bitcoin: {btc_rate:,.0f} ‚ÇΩ\n\n"
            f"üí° –ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"
        )
    except:
        text = (
            f"üìà <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã</b>\n\n"
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞\n\n"
            f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        )
    
    await message.answer(text, reply_markup=ReplyKeyboards.main_menu(), parse_mode="HTML")

@router.message(F.text == "‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu_handler(message: Message, state: FSMContext):
    await state.clear()
    await show_main_menu(message)

@router.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def back_handler(message: Message, state: FSMContext):
    await message.answer(
        "üí∞ <b>–ü–æ–∫—É–ø–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞:",
        reply_markup=ReplyKeyboards.exchange_menu(),
        parse_mode="HTML"
    )

@router.message(ExchangeStates.waiting_for_amount)
async def amount_handler(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await show_main_menu(message)
        return
    
    data = await state.get_data()
    exchange_type = data.get('exchange_type')
    
    min_amount = await db.get_setting("min_amount", config.MIN_AMOUNT)
    max_amount = await db.get_setting("max_amount", config.MAX_AMOUNT)
    
    try:
        if exchange_type == "rub":
            amount = float(message.text.replace(' ', '').replace(',', '.'))
            if amount < min_amount or amount > max_amount:
                await message.answer(
                    f"‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {min_amount:,} –¥–æ {max_amount:,} —Ä—É–±–ª–µ–π"
                )
                return
            await state.update_data(rub_amount=amount)
        else:
            btc_amount = float(message.text.replace(',', '.'))
            if btc_amount <= 0 or btc_amount > 10:
                await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Bitcoin")
                return
            await state.update_data(btc_amount=btc_amount)
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    
    await message.answer(
        "‚Çø <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Bitcoin –∞–¥—Ä–µ—Å</b>\n\n"
        "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–¥—Ä–µ—Å —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n"
        "Bitcoin –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–º–µ–Ω–Ω–æ –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å.",
        reply_markup=ReplyKeyboards.back_to_main(),
        parse_mode="HTML"
    )
    await state.set_state(ExchangeStates.waiting_for_btc_address)

@router.message(ExchangeStates.waiting_for_btc_address)
async def btc_address_handler(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await show_main_menu(message)
        return
    
    btc_address = message.text.strip()
    
    if not BitcoinAPI.validate_btc_address(btc_address):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Bitcoin –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    data = await state.get_data()
    exchange_type = data['exchange_type']
    
    btc_rate = await BitcoinAPI.get_btc_rate()
    if not btc_rate:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    if exchange_type == "rub":
        rub_amount = data['rub_amount']
        btc_amount = BitcoinAPI.calculate_btc_amount(rub_amount, btc_rate)
    else:
        btc_amount = data['btc_amount']
        rub_amount = btc_amount * btc_rate
    
    processing_percentage = 10.0
    admin_percentage = await db.get_setting("admin_percentage", config.ADMIN_PERCENTAGE)
    
    processing_fee, admin_fee, total_amount = BitcoinAPI.calculate_fees(
        rub_amount, processing_percentage, admin_percentage
    )
    
    text = (
        f"üìä <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç:</b>\n\n"
        f"üí± –ö—É—Ä—Å BTC: {btc_rate:,.0f} ‚ÇΩ\n"
        f"üí∞ –°—É–º–º–∞ –∫ –æ–±–º–µ–Ω—É: {rub_amount:,.0f} ‚ÇΩ\n"
        f"‚Çø –ü–æ–ª—É—á–∏—Ç–µ Bitcoin: {btc_amount:.8f} BTC\n\n"
        f"üí≥ –ö–æ–º–∏—Å—Å–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞: {processing_fee:,.0f} ‚ÇΩ\n"
        f"üèõ –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: {admin_fee:,.0f} ‚ÇΩ\n"
        f"üí∏ <b>–ö –æ–ø–ª–∞—Ç–µ: {total_amount:,.0f} ‚ÇΩ</b>\n\n"
        f"‚Çø Bitcoin –∞–¥—Ä–µ—Å:\n<code>{btc_address}</code>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
    )
    
    await state.update_data(
        btc_address=btc_address,
        rub_amount=rub_amount,
        btc_amount=btc_amount,
        btc_rate=btc_rate,
        processing_fee=processing_fee,
        admin_fee=admin_fee,
        total_amount=total_amount
    )
    
    await message.answer(text, reply_markup=ReplyKeyboards.payment_methods(), parse_mode="HTML")

@router.message(F.text.in_(["üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", "üì± –°–ë–ü"]))
async def payment_method_handler(message: Message, state: FSMContext):
    payment_type = "card" if "–∫–∞—Ä—Ç–∞" in message.text else "sbp"
    data = await state.get_data()
    
    order_id = await db.create_order(
        user_id=message.from_user.id,
        amount_rub=data['rub_amount'],
        amount_btc=data['btc_amount'],
        btc_address=data['btc_address'],
        rate=data['btc_rate'],
        processing_fee=data['processing_fee'],
        admin_fee=data['admin_fee'],
        total_amount=data['total_amount'],
        payment_type=payment_type
    )
    
    api_response = await onlypays_api.create_order(
        amount_rub=data['total_amount'],
        payment_type=payment_type,
        personal_id=str(order_id)
    )
    
    if "error" in api_response:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {api_response['error']}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=ReplyKeyboards.main_menu()
        )
        return
    
    requisites_text = ""
    if payment_type == "card":
        requisites_text = (
            f"üí≥ –ö–∞—Ä—Ç–∞: {api_response['card_number']}\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {api_response['cardholder_name']}\n"
            f"üèõ –ë–∞–Ω–∫: {api_response['bank']}"
        )
    else:
        requisites_text = (
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {api_response['phone']}\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {api_response['recipient_name']}\n"
            f"üèõ –ë–∞–Ω–∫: {api_response['bank']}"
        )
    
    await db.update_order(
        order_id,
        onlypays_id=api_response['id'],
        requisites=requisites_text
    )
    
    text = (
        f"üí≥ <b>–ó–∞—è–≤–∫–∞ #{order_id} —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
        f"üí∞ –ö –æ–ø–ª–∞—Ç–µ: <b>{data['total_amount']:,.0f} ‚ÇΩ</b>\n\n"
        f"üìã <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n"
        f"{requisites_text}\n\n"
        f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
        f"‚Ä¢ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
        f"‚Ä¢ Bitcoin –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
        f"‚è∞ –ó–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 30 –º–∏–Ω—É—Ç"
    )
    
    await message.answer(
        text, 
        reply_markup=ReplyKeyboards.order_menu(),
        parse_mode="HTML"
    )
    
    await state.clear()

@router.message(F.text == "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
async def check_status_handler(message: Message):
    orders = await db.get_user_orders(message.from_user.id, 1)
    
    if not orders:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫",
            reply_markup=ReplyKeyboards.main_menu()
        )
        return
    
    order = orders[0]
    
    if order['onlypays_id'] and order['status'] == 'waiting':
        api_response = await onlypays_api.get_order_status(order['onlypays_id'])
        
        if api_response.get('status') == 'finished':
            await db.update_order(order['id'], status='finished')
            await message.answer(
                f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order['id']} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n"
                f"–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, Bitcoin –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å.\n"
                f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–æ 1 —á–∞—Å–∞.",
                reply_markup=ReplyKeyboards.main_menu(),
                parse_mode="HTML"
            )
        else:
            await message.answer(
                f"‚è≥ –ó–∞—è–≤–∫–∞ #{order['id']} –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ\n\n"
                f"–û–∂–∏–¥–∞–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞...",
                reply_markup=ReplyKeyboards.order_menu()
            )
    else:
        status_text = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞" if order['status'] == 'finished' else "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞" if order['status'] == 'cancelled' else "‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
        await message.answer(
            f"üìã –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{order['id']}: {status_text}",
            reply_markup=ReplyKeyboards.main_menu()
        )

@router.message(F.text.in_(["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É"]))
async def confirm_cancel_order_handler(message: Message):
    action = "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞" if "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" in message.text else "–æ—Ç–º–µ–Ω–µ–Ω–∞" 
    
    await message.answer(
        f"–ó–∞—è–≤–∫–∞ {action}",
        reply_markup=ReplyKeyboards.main_menu()
    )










@router.message(ExchangeStates.waiting_for_contact)
async def contact_handler(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await show_main_menu(message)
        return
    
    user_id = message.from_user.id
    
    try:
        last_review = await db.get_last_review_time(user_id)
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º message.date –≤ naive datetime
        current_time = message.date.replace(tzinfo=None)
        
        if last_review:
            time_diff = current_time - last_review
            cooldown_hours = 24
            
            if time_diff.total_seconds() < cooldown_hours * 3600:
                remaining = cooldown_hours * 3600 - time_diff.total_seconds()
                hours_left = int(remaining // 3600)
                minutes_left = int((remaining % 3600) // 60)
                
                await message.answer(
                    f"‚è∞ <b>–û—Ç–∑—ã–≤ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏</b>\n\n"
                    f"–í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–∑—ã–≤–∞: {hours_left}—á {minutes_left}–º",
                    reply_markup=ReplyKeyboards.main_menu(),
                    parse_mode="HTML"
                )
                await state.clear()
                return
        
        if len(message.text) < 10:
            await message.answer(
                f"üìù <b>–û—Ç–∑—ã–≤ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π</b>\n\n"
                f"–ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤, —É –≤–∞—Å: {len(message.text)}",
                parse_mode="HTML"
            )
            return
        
        if len(message.text) > 1000:
            await message.answer(
                f"üìù <b>–û—Ç–∑—ã–≤ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π</b>\n\n"
                f"–ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤, —É –≤–∞—Å: {len(message.text)}",
                parse_mode="HTML"
            )
            return
        
        user = await db.get_user(user_id)
        review_text = (
            f"üìù <b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤</b>\n\n"
            f"üë§ {user['first_name']} (@{user['username'] or '–Ω–µ—Ç'})\n"
            f"üÜî ID: {user_id}\n"
            f"üìÖ {current_time.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üí¨ <b>–¢–µ–∫—Å—Ç:</b>\n{message.text}"
        )
        
        review_id = await db.save_review(user_id, message.text)
        
        if config.ADMIN_CHAT_ID:
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            from aiogram.types import InlineKeyboardButton
            
            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"review_approve_{review_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"review_reject_{review_id}")
            )
            
            await message.bot.send_message(
                config.ADMIN_CHAT_ID,
                review_text,
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
        
        await message.answer(
            "‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!</b>\n\n"
            "–û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.",
            reply_markup=ReplyKeyboards.main_menu(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Review error: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboards.main_menu()
        )
    
    await state.clear()










@router.message()
async def unknown_handler(message: Message):
    await message.answer(
        "‚ùì –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=ReplyKeyboards.main_menu()
    )