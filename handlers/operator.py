# handlers/operator.py
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.models import Database
from keyboards.inline import Keyboards
from config import config

logger = logging.getLogger(__name__)
router = Router()

class OperatorStates(StatesGroup):
    waiting_for_note = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database(config.DATABASE_URL)

def is_operator(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    return user_id == config.OPERATOR_CHAT_ID or user_id == config.ADMIN_CHAT_ID

async def notify_operators(bot, order_id: int, is_problematic: bool = False):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    order = await db.get_order(order_id)
    if not order:
        return
    
    user = await db.get_user(order['user_id'])
    
    status_text = "‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ù–ê–Ø –ó–ê–Ø–í–ö–ê" if is_problematic else "üí≥ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"
    
    text = (
        f"{status_text}\n\n"
        f"üÜî –ó–∞—è–≤–∫–∞: #{order_id}\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['first_name']} (@{user['username']})\n"
        f"üí∞ –°—É–º–º–∞: {order['total_amount']:,.2f} ‚ÇΩ\n"
        f"‚Çø Bitcoin: {order['amount_btc']:.8f} BTC\n"
        f"üì± –¢–∏–ø –æ–ø–ª–∞—Ç—ã: {order['payment_type']}\n\n"
        f"üìã –†–µ–∫–≤–∏–∑–∏—Ç—ã:\n{order['requisites']}\n\n"
        f"‚Çø BTC –∞–¥—Ä–µ—Å: <code>{order['btc_address']}</code>"
    )
    
    try:
        await bot.send_message(
            config.OPERATOR_CHAT_ID,
            text,
            reply_markup=Keyboards.operator_panel(order_id),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Failed to notify operators: {e}")

@router.callback_query(F.data.startswith("op_paid_"))
async def operator_paid_handler(callback: CallbackQuery):
    if not is_operator(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    order_id = int(callback.data.split("_")[2])
    
    await db.update_order(order_id, status='finished')
    
    order = await db.get_order(order_id)
    user = await db.get_user(order['user_id'])
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await callback.bot.send_message(
            order['user_id'],
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n"
            f"–í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n"
            f"Bitcoin –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å.\n"
            f"–í—Ä–µ–º—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: –¥–æ 1 —á–∞—Å–∞.",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Failed to notify user {order['user_id']}: {e}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.update_user(
        order['user_id'],
        total_operations=user['total_operations'] + 1,
        total_amount=user['total_amount'] + order['total_amount']
    )
    
    await callback.message.edit_text(
        f"‚úÖ –ó–∞—è–≤–∫–∞ #{order_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω–∞—è\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏.",
        reply_markup=None
    )

@router.callback_query(F.data.startswith("op_not_paid_"))
async def operator_not_paid_handler(callback: CallbackQuery):
    if not is_operator(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    order_id = int(callback.data.split("_")[3])
    
    await db.update_order(order_id, status='cancelled')
    
    order = await db.get_order(order_id)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await callback.bot.send_message(
            order['user_id'],
            f"‚ùå <b>–ó–∞—è–≤–∫–∞ #{order_id} –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
            f"–ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\n"
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Failed to notify user {order['user_id']}: {e}")
    
    await callback.message.edit_text(
        f"‚ùå –ó–∞—è–≤–∫–∞ #{order_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–∞—è\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç–º–µ–Ω–µ.",
        reply_markup=None
    )

@router.callback_query(F.data.startswith("op_problem_"))
async def operator_problem_handler(callback: CallbackQuery):
    if not is_operator(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    order_id = int(callback.data.split("_")[2])
    
    await db.update_order(order_id, is_problematic=True)
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ #{order_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω–∞—è\n\n"
        f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞.",
        reply_markup=Keyboards.operator_panel(order_id)
    )

@router.callback_query(F.data.startswith("op_note_"))
async def operator_note_handler(callback: CallbackQuery, state: FSMContext):
    if not is_operator(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    order_id = int(callback.data.split("_")[2])
    
    await state.update_data(order_id=order_id)
    
    await callback.message.edit_text(
        f"üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫ –∑–∞—è–≤–∫–µ #{order_id}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:",
    )
    await state.set_state(OperatorStates.waiting_for_note)

@router.message(OperatorStates.waiting_for_note)
async def process_note(message: Message, state: FSMContext):
    if not is_operator(message.from_user.id):
        return
    
    data = await state.get_data()
    order_id = data['order_id']
    
    await db.update_order(order_id, operator_notes=message.text)
    
    await message.answer(
        f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ –∫ –∑–∞—è–≤–∫–µ #{order_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n\n"
        f"{message.text}"
    )
    await state.clear()