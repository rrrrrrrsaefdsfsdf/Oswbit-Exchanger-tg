import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from keyboards.reply import ReplyKeyboards
from keyboards.inline import InlineKeyboards
from utils.bitcoin import BitcoinAPI
from database.models import Database
from api.onlypays import onlypays_api
from config import config

logger = logging.getLogger(__name__)
router = Router()

class ExchangeStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_address = State()
    waiting_for_card_details = State()

db = Database(config.DATABASE_URL)

@router.message(F.text == "–ö—É–ø–∏—Ç—å")
async def buy_crypto_handler(message: Message, state: FSMContext):
    await state.clear()
    
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å."
    
    await message.answer(
        text,
        reply_markup=InlineKeyboards.buy_crypto_selection()
    )

@router.callback_query(F.data.startswith("buy_"))
async def buy_crypto_selected(callback: CallbackQuery, state: FSMContext):
    if callback.data == "buy_main_menu":
        await callback.bot.send_message(
            callback.message.chat.id,
            "üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=ReplyKeyboards.main_menu()
        )
        return
    
    crypto = callback.data.replace("buy_", "").upper()
    
    await state.update_data(
        operation="buy",
        crypto=crypto,
        direction="rub_to_crypto"
    )
    
    btc_rate = await BitcoinAPI.get_btc_rate()
    
    text = (
        f"üí∞ <b>–ü–æ–∫—É–ø–∫–∞ Bitcoin</b>\n\n"
        f"üìä –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {btc_rate:,.0f} ‚ÇΩ\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboards.amount_input_keyboard(crypto.lower(), "rub_to_crypto"),
        parse_mode="HTML"
    )
    
    await state.set_state(ExchangeStates.waiting_for_amount)

@router.message(F.text == "–ü—Ä–æ–¥–∞—Ç—å")
async def sell_crypto_handler(message: Message, state: FSMContext):
    await state.clear()
    
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å."
    
    await message.answer(
        text,
        reply_markup=InlineKeyboards.sell_crypto_selection()
    )

@router.callback_query(F.data.startswith("sell_"))
async def sell_crypto_selected(callback: CallbackQuery, state: FSMContext):
    if callback.data == "sell_main_menu":
        await callback.bot.send_message(
            callback.message.chat.id,
            "üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=ReplyKeyboards.main_menu()
        )
        return
    
    crypto = callback.data.replace("sell_", "").upper()
    
    await state.update_data(
        operation="sell",
        crypto=crypto,
        direction="crypto_to_rub"
    )
    
    btc_rate = await BitcoinAPI.get_btc_rate()
    
    text = (
        f"üí∏ <b>–ü—Ä–æ–¥–∞–∂–∞ Bitcoin</b>\n\n"
        f"üìä –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {btc_rate:,.0f} ‚ÇΩ\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboards.amount_input_keyboard(crypto.lower(), "crypto_to_rub"),
        parse_mode="HTML"
    )
    
    await state.set_state(ExchangeStates.waiting_for_amount)

@router.callback_query(F.data.startswith("amount_"))
async def amount_selected(callback: CallbackQuery, state: FSMContext):
    if "back" in callback.data:
        data = await state.get_data()
        operation = data.get("operation", "buy")
        if operation == "buy":
            await buy_crypto_handler(callback.message, state)
        else:
            await sell_crypto_handler(callback.message, state)
        return
    
    if "main_menu" in callback.data:
        await callback.bot.send_message(
            callback.message.chat.id,
            "üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=ReplyKeyboards.main_menu()
        )
        return
    
    parts = callback.data.split("_")
    crypto = parts[1].upper()
    direction = "_".join(parts[2:-1])
    amount = float(parts[-1])
    
    await process_amount_and_show_calculation(callback, state, crypto, direction, amount)

@router.message(ExchangeStates.waiting_for_amount)
async def manual_amount_input(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(' ', '').replace(',', '.'))
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        
        data = await state.get_data()
        crypto = data.get("crypto")
        direction = data.get("direction")
        
        await process_amount_and_show_calculation_for_message(
            message, state, crypto, direction, amount
        )
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

async def process_amount_and_show_calculation(callback: CallbackQuery, state: FSMContext, 
                                            crypto: str, direction: str, amount: float):
    btc_rate = await BitcoinAPI.get_btc_rate()
    
    if direction == "rub_to_crypto":
        rub_amount = amount
        crypto_amount = BitcoinAPI.calculate_btc_amount(rub_amount, btc_rate)
    else:
        crypto_amount = amount
        rub_amount = crypto_amount * btc_rate
    
    admin_percentage = await db.get_setting("admin_percentage", config.ADMIN_PERCENTAGE)
    processing_fee = rub_amount * 0.10
    admin_fee = (rub_amount + processing_fee) * (admin_percentage / 100)
    total_amount = rub_amount + processing_fee + admin_fee
    
    await state.update_data(
        crypto=crypto,
        direction=direction,
        rub_amount=rub_amount,
        crypto_amount=crypto_amount,
        rate=btc_rate,
        processing_fee=processing_fee,
        admin_fee=admin_fee,
        total_amount=total_amount
    )
    
    operation_text = "–ü–æ–∫—É–ø–∫–∞" if direction == "rub_to_crypto" else "–ü—Ä–æ–¥–∞–∂–∞"
    
    text = (
        f"üìä <b>{operation_text} Bitcoin</b>\n\n"
        f"üí± –ö—É—Ä—Å: {btc_rate:,.0f} ‚ÇΩ\n"
        f"üí∞ –°—É–º–º–∞: {rub_amount:,.0f} ‚ÇΩ\n"
        f"‚Çø –ü–æ–ª—É—á–∏—Ç–µ: {crypto_amount:.8f} BTC\n\n"
        f"üí≥ –ö–æ–º–∏—Å—Å–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞: {processing_fee:,.0f} ‚ÇΩ\n"
        f"üèõ –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: {admin_fee:,.0f} ‚ÇΩ\n"
        f"üí∏ <b>–ò—Ç–æ–≥–æ: {total_amount:,.0f} ‚ÇΩ</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± {'–æ–ø–ª–∞—Ç—ã' if direction == 'rub_to_crypto' else '–ø–æ–ª—É—á–µ–Ω–∏—è'}:"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboards.payment_methods_for_crypto(
            crypto.lower(), str(amount), direction
        ),
        parse_mode="HTML"
    )

async def process_amount_and_show_calculation_for_message(message: Message, state: FSMContext,
                                                        crypto: str, direction: str, amount: float):
    btc_rate = await BitcoinAPI.get_btc_rate()
    
    if direction == "rub_to_crypto":
        rub_amount = amount
        crypto_amount = BitcoinAPI.calculate_btc_amount(rub_amount, btc_rate)
    else:
        crypto_amount = amount
        rub_amount = crypto_amount * btc_rate
    
    admin_percentage = await db.get_setting("admin_percentage", config.ADMIN_PERCENTAGE)
    processing_fee = rub_amount * 0.10
    admin_fee = (rub_amount + processing_fee) * (admin_percentage / 100)
    total_amount = rub_amount + processing_fee + admin_fee
    
    await state.update_data(
        crypto=crypto,
        direction=direction,
        rub_amount=rub_amount,
        crypto_amount=crypto_amount,
        rate=btc_rate,
        processing_fee=processing_fee,
        admin_fee=admin_fee,
        total_amount=total_amount
    )
    
    operation_text = "–ü–æ–∫—É–ø–∫–∞" if direction == "rub_to_crypto" else "–ü—Ä–æ–¥–∞–∂–∞"
    
    text = (
        f"üìä <b>{operation_text} Bitcoin</b>\n\n"
        f"üí± –ö—É—Ä—Å: {btc_rate:,.0f} ‚ÇΩ\n"
        f"üí∞ –°—É–º–º–∞: {rub_amount:,.0f} ‚ÇΩ\n"
        f"‚Çø –ü–æ–ª—É—á–∏—Ç–µ: {crypto_amount:.8f} BTC\n\n"
        f"üí≥ –ö–æ–º–∏—Å—Å–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞: {processing_fee:,.0f} ‚ÇΩ\n"
        f"üèõ –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: {admin_fee:,.0f} ‚ÇΩ\n"
        f"üí∏ <b>–ò—Ç–æ–≥–æ: {total_amount:,.0f} ‚ÇΩ</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± {'–æ–ø–ª–∞—Ç—ã' if direction == 'rub_to_crypto' else '–ø–æ–ª—É—á–µ–Ω–∏—è'}:"
    )
    
    await message.answer(
        text,
        reply_markup=InlineKeyboards.payment_methods_for_crypto(
            crypto.lower(), str(amount), direction
        ),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("payment_"))
async def payment_method_selected(callback: CallbackQuery, state: FSMContext):
    if "back" in callback.data:
        data = await state.get_data()
        crypto = data.get("crypto")
        direction = data.get("direction")
        
        await callback.message.edit_text(
            f"–í–≤–µ–¥–∏—Ç–µ {'—Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö' if direction == 'rub_to_crypto' else '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC'}:",
            reply_markup=InlineKeyboards.amount_input_keyboard(crypto.lower(), direction)
        )
        return
    
    if "main_menu" in callback.data:
        await callback.bot.send_message(
            callback.message.chat.id,
            "üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=ReplyKeyboards.main_menu()
        )
        return
    
    parts = callback.data.split("_")
    crypto = parts[1].upper()
    direction = "_".join(parts[2:-2])
    amount = parts[-2]
    payment_type = parts[-1]
    
    await state.update_data(payment_type=payment_type)
    
    if direction == "rub_to_crypto":
        text = (
            f"‚Çø <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Bitcoin –∞–¥—Ä–µ—Å</b>\n\n"
            f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–¥—Ä–µ—Å —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n"
            f"Bitcoin –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–º–µ–Ω–Ω–æ –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å."
        )
    else:
        text = (
            f"üí≥ <b>–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è</b>\n\n"
            f"{'–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã' if payment_type == 'card' else '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –°–ë–ü'}:"
        )
    
    await callback.message.edit_text(text, parse_mode="HTML")
    await state.set_state(ExchangeStates.waiting_for_address)

@router.message(ExchangeStates.waiting_for_address)
async def address_input_handler(message: Message, state: FSMContext):
    address = message.text.strip()
    
    data = await state.get_data()
    direction = data.get("direction")
    crypto = data.get("crypto")
    
    if direction == "rub_to_crypto":
        if not BitcoinAPI.validate_btc_address(address):
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Bitcoin –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
    else:
        if len(address) < 10:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
    
    await state.update_data(address=address)
    
    order_id = await create_exchange_order(message.from_user.id, state)
    
    await show_order_confirmation(message, state, order_id)

async def create_exchange_order(user_id: int, state: FSMContext) -> int:
    data = await state.get_data()
    
    order_id = await db.create_order(
        user_id=user_id,
        amount_rub=data["rub_amount"],
        amount_btc=data["crypto_amount"],
        btc_address=data["address"],
        rate=data["rate"],
        processing_fee=data["processing_fee"],
        admin_fee=data["admin_fee"],
        total_amount=data["total_amount"],
        payment_type=data["payment_type"]
    )
    
    return order_id

async def show_order_confirmation(message: Message, state: FSMContext, order_id: int):
    data = await state.get_data()
    
    operation_text = "–ü–æ–∫—É–ø–∫–∞" if data["direction"] == "rub_to_crypto" else "–ü—Ä–æ–¥–∞–∂–∞"
    
    text = (
        f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order_id} —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
        f"üìã <b>{operation_text} Bitcoin</b>\n"
        f"üí∞ –°—É–º–º–∞: {data['rub_amount']:,.0f} ‚ÇΩ\n"
        f"‚Çø –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['crypto_amount']:.8f} BTC\n"
        f"üí∏ –ö {'–æ–ø–ª–∞—Ç–µ' if data['direction'] == 'rub_to_crypto' else '–ø–æ–ª—É—á–µ–Ω–∏—é'}: {data['total_amount']:,.0f} ‚ÇΩ\n\n"
        f"üìù –ê–¥—Ä–µ—Å/–†–µ–∫–≤–∏–∑–∏—Ç—ã:\n<code>{data['address']}</code>\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:"
    )
    
    await message.answer(
        text,
        reply_markup=InlineKeyboards.order_confirmation(order_id),
        parse_mode="HTML"
    )
    
    await state.clear()

@router.callback_query(F.data.startswith(("confirm_order_", "cancel_order_")))
async def order_confirmation_handler(callback: CallbackQuery):
    action = "confirm" if callback.data.startswith("confirm") else "cancel"
    order_id = int(callback.data.split("_")[-1])
    
    if action == "confirm":
        order = await db.get_order(order_id)
        
        text = (
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã.\n"
            f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 5-15 –º–∏–Ω—É—Ç."
        )
    else:
        await db.update_order(order_id, status='cancelled')
        text = f"‚ùå –ó–∞—è–≤–∫–∞ #{order_id} –æ—Ç–º–µ–Ω–µ–Ω–∞."
    
    await callback.message.edit_text(text, parse_mode="HTML")
    
    import asyncio
    await asyncio.sleep(3)
    await callback.bot.send_message(
        callback.message.chat.id,
        "üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=ReplyKeyboards.main_menu()
    )