import logging
from datetime import datetime
import aiosqlite
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ChatType
from database.models import Database
from keyboards.reply import ReplyKeyboards
from api.onlypays import onlypays_api
from config import config

logger = logging.getLogger(__name__)
router = Router()
db = Database(config.DATABASE_URL)

class AdminStates(StatesGroup):
    admin_mode = State()
    waiting_for_welcome_message = State()
    waiting_for_percentage = State()
    waiting_for_broadcast_message = State()
    waiting_for_limits = State()

def normalize_bool(value):
    if isinstance(value, str):
        return value.lower() in ('true', '1', 'yes', 'on', 'enabled')
    return bool(value) if value is not None else False

async def is_admin_extended(user_id: int) -> bool:
    if user_id == config.ADMIN_USER_ID:
        return True
    try:
        admin_users = await db.get_setting("admin_users", [])
        return user_id in admin_users
    except:
        return False

async def is_operator_extended(user_id: int) -> bool:
    if user_id in [config.ADMIN_USER_ID, config.OPERATOR_CHAT_ID]:
        return True
    try:
        admin_users = await db.get_setting("admin_users", [])
        operator_users = await db.get_setting("operator_users", [])
        return user_id in admin_users or user_id in operator_users
    except:
        return False

async def is_admin_in_chat(user_id: int, chat_id: int) -> bool:
    if user_id == config.ADMIN_USER_ID:
        return True
    admin_chats = [config.ADMIN_CHAT_ID, config.OPERATOR_CHAT_ID]
    admin_chats_setting = await db.get_setting("admin_chats", [])
    admin_chats.extend(admin_chats_setting)
    if chat_id not in admin_chats:
        return False
    admin_users = await db.get_setting("admin_users", [])
    operator_users = await db.get_setting("operator_users", [])
    return user_id in admin_users or user_id in operator_users

def create_admin_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
    )
    builder.row(
        InlineKeyboardButton(text="üìã –ó–∞—è–≤–∫–∏", callback_data="admin_orders"),
        InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="admin_balance")
    )
    builder.row(
        InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
        InlineKeyboardButton(text="üë• —Å—Ç–∞—Ñ—Ñ", callback_data="admin_staff")
    )
    return builder






async def update_settings_menu(callback: CallbackQuery):
    try:
        current_percentage = await db.get_setting("admin_percentage", config.ADMIN_PERCENTAGE)
        captcha_status = normalize_bool(await db.get_setting("captcha_enabled", config.CAPTCHA_ENABLED))
        min_amount = await db.get_setting("min_amount", config.MIN_AMOUNT)
        max_amount = await db.get_setting("max_amount", config.MAX_AMOUNT)
        
        status_text = "–≤–∫–ª—é—á–µ–Ω–∞ ‚úÖ" if captcha_status else "–æ—Ç–∫–ª—é—á–µ–Ω–∞ ‚ùå"
        
        new_text = (
            f"‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            f"üí∏ –ü—Ä–æ—Ü–µ–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {current_percentage}%\n"
            f"ü§ñ –ö–∞–ø—á–∞: {status_text}\n"
            f"üí∞ –õ–∏–º–∏—Ç—ã: {min_amount:,} - {max_amount:,} ‚ÇΩ\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:"
        )
        
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üí∏ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç", callback_data="admin_set_percentage"),
            InlineKeyboardButton(text="ü§ñ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫–∞–ø—á—É", callback_data="admin_toggle_captcha")
        )
        builder.row(
            InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç—ã", callback_data="admin_set_limits"),
            InlineKeyboardButton(text="üìù –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", callback_data="admin_set_welcome")
        )
        builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        
        if callback.message.text != new_text:
            await callback.message.edit_text(new_text, reply_markup=builder.as_markup(), parse_mode="HTML")
        else:
            await callback.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
    except Exception as e:
        logger.error(f"Settings menu update error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)





@router.message(Command("admin"))
async def admin_panel_handler(message: Message, state: FSMContext):
    if not await is_admin_in_chat(message.from_user.id, message.chat.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await state.clear()
    
    if message.chat.type == ChatType.PRIVATE:
        await state.set_state(AdminStates.admin_mode)
        await message.answer(
            "üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=ReplyKeyboards.admin_menu(),
            parse_mode="HTML"
        )
    else:
        builder = create_admin_keyboard()
        await message.answer(
            f"üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n"
            f"–ß–∞—Ç: {message.chat.title}\n"
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {message.from_user.first_name}",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )






@router.callback_query(F.data.startswith("admin_"))
async def admin_callback_handler(callback: CallbackQuery, state: FSMContext):
    if not await is_admin_in_chat(callback.from_user.id, callback.message.chat.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    action = callback.data.replace("admin_", "")
    builder = InlineKeyboardBuilder()
    
    try:
        if action == "stats":
            stats = await db.get_statistics()
            text = (
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
                f"üìã –ó–∞—è–≤–æ–∫: {stats['total_orders']}\n"
                f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['completed_orders']}\n"
                f"üí∞ –û–±–æ—Ä–æ—Ç: {stats['total_volume']:,.0f} ‚ÇΩ\n\n"
                f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {stats['completion_rate']:.1f}%\n"
                f"üìÖ –°–µ–≥–æ–¥–Ω—è –∑–∞—è–≤–æ–∫: {stats['today_orders']}\n"
                f"üíµ –°–µ–≥–æ–¥–Ω—è –æ–±–æ—Ä–æ—Ç: {stats['today_volume']:,.0f} ‚ÇΩ"
            )
            builder.row(InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats"))
            builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel"))
            
            if callback.message.text != text:
                await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
            else:
                await callback.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞")
        
        elif action == "balance":
            try:
                balance_data = await onlypays_api.get_balance()
                balance = balance_data.get('balance', 0)
                text = f"üí∞ <b>–ë–∞–ª–∞–Ω—Å –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞</b>\n\nüí≥ –î–æ—Å—Ç—É–ø–Ω–æ: {balance:,.2f} ‚ÇΩ"
            except Exception as e:
                text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:\n{e}"
            
            builder.row(InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_balance"))
            builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel"))
            
            if callback.message.text != text:
                await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
            else:
                await callback.answer("üí∞ –ë–∞–ª–∞–Ω—Å —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π")
        
        elif action == "settings":
            await update_settings_menu(callback)
        
        elif action == "toggle_captcha":
            try:
                current_status = normalize_bool(await db.get_setting("captcha_enabled", config.CAPTCHA_ENABLED))
                new_status = not current_status
                await db.set_setting("captcha_enabled", new_status)
                status_text = "–≤–∫–ª—é—á–µ–Ω–∞ ‚úÖ" if new_status else "–æ—Ç–∫–ª—é—á–µ–Ω–∞ ‚ùå"
                await callback.answer(f"–ö–∞–ø—á–∞ {status_text}", show_alert=True)
                await update_settings_menu(callback)
            except Exception as e:
                await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
        
        elif action in ["set_percentage", "set_limits", "set_welcome"]:
            commands = {
                "set_percentage": "/set_percentage –ß–ò–°–õ–û",
                "set_limits": "/set_limits –ú–ò–ù_–°–£–ú–ú–ê –ú–ê–ö–°_–°–£–ú–ú–ê",
                "set_welcome": "/set_welcome"
            }
            await callback.answer(f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: {commands[action]}", show_alert=True)
        
        elif action == "broadcast":
            await callback.answer("–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /admin", show_alert=True)
        
        elif action == "orders":
            text = "üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n/recent_orders - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏\n/pending_orders - –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏"
            builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel"))
            
            if callback.message.text != text:
                await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
            else:
                await callback.answer("üìã –ú–µ–Ω—é –∑–∞—è–≤–æ–∫ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ")
        
        elif action == "staff":
            admin_users = await db.get_setting("admin_users", [])
            operator_users = await db.get_setting("operator_users", [])
            text = "üë• <b>–ü–µ—Ä—Å–æ–Ω–∞–ª —Å–∏—Å—Ç–µ–º—ã</b>\n\nüëë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:</b>\n"
            text += f"‚Ä¢ {config.ADMIN_USER_ID} (—Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)\n"
            for user_id in admin_users:
                text += f"‚Ä¢ {user_id}\n"
            text += "\nüîß <b>–û–ø–µ—Ä–∞—Ç–æ—Ä—ã:</b>\n"
            for user_id in operator_users:
                text += f"‚Ä¢ {user_id}\n"
            if not admin_users and not operator_users:
                text += "–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞\n"
            text += "\nüí° –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n‚Ä¢ /grant_admin ID\n‚Ä¢ /grant_operator ID\n‚Ä¢ /revoke_admin ID\n‚Ä¢ /revoke_operator ID"
            builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel"))
            
            if callback.message.text != text:
                await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
            else:
                await callback.answer("üë• –ú–µ–Ω—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ")
        
        elif action == "panel":
            builder = create_admin_keyboard()
            new_text = (
                f"üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n"
                f"–ß–∞—Ç: {callback.message.chat.title}\n"
                f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {callback.from_user.first_name}"
            )
            
            if callback.message.text != new_text:
                await callback.message.edit_text(
                    new_text,
                    reply_markup=builder.as_markup(),
                    parse_mode="HTML"
                )
            else:
                await callback.answer("üëë –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ")
        
        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)
    
    except Exception as e:
        logger.error(f"Admin callback error: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)








async def safe_edit_message(callback: CallbackQuery, text: str, markup=None, parse_mode="HTML"):
    try:
        if callback.message.text != text:
            await callback.message.edit_text(text, reply_markup=markup, parse_mode=parse_mode)
            return True
        else:
            await callback.answer("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å")
            return False
    except Exception as e:
        logger.error(f"Message edit error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)
        return False







@router.message(Command("grant_admin"))
async def grant_admin_handler(message: Message):
    if not await is_admin_extended(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    try:
        user_id = int(message.text.split()[1])
        admin_users = await db.get_setting("admin_users", [])
        if user_id not in admin_users:
            admin_users.append(user_id)
            await db.set_setting("admin_users", admin_users)
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            try:
                await message.bot.send_message(user_id, "üéâ –í–∞–º –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /admin")
            except:
                pass
        else:
            await message.answer(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant_admin USER_ID")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(Command("grant_operator"))
async def grant_operator_handler(message: Message):
    if not await is_admin_extended(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    try:
        user_id = int(message.text.split()[1])
        operator_users = await db.get_setting("operator_users", [])
        if user_id not in operator_users:
            operator_users.append(user_id)
            await db.set_setting("operator_users", operator_users)
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ç–µ–ø–µ—Ä—å –æ–ø–µ—Ä–∞—Ç–æ—Ä")
            try:
                await message.bot.send_message(user_id, "üéâ –í–∞–º –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /admin")
            except:
                pass
        else:
            await message.answer(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant_operator USER_ID")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(Command("revoke_admin"))
async def revoke_admin_handler(message: Message):
    if not await is_admin_extended(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    try:
        user_id = int(message.text.split()[1])
        admin_users = await db.get_setting("admin_users", [])
        if user_id in admin_users:
            admin_users.remove(user_id)
            await db.set_setting("admin_users", admin_users)
            await message.answer(f"‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            try:
                await message.bot.send_message(user_id, "‚ùå –í–∞—à–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã")
            except:
                pass
        else:
            await message.answer(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /revoke_admin USER_ID")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(Command("revoke_operator"))
async def revoke_operator_handler(message: Message):
    if not await is_admin_extended(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    try:
        user_id = int(message.text.split()[1])
        operator_users = await db.get_setting("operator_users", [])
        if user_id in operator_users:
            operator_users.remove(user_id)
            await db.set_setting("operator_users", operator_users)
            await message.answer(f"‚úÖ –ü—Ä–∞–≤–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            try:
                await message.bot.send_message(user_id, "‚ùå –í–∞—à–∏ –ø—Ä–∞–≤–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã")
            except:
                pass
        else:
            await message.answer(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /revoke_operator USER_ID")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(Command("list_staff"))
async def list_staff_handler(message: Message):
    if not await is_admin_extended(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        return
    admin_users = await db.get_setting("admin_users", [])
    operator_users = await db.get_setting("operator_users", [])
    text = "üë• <b>—Å—Ç–∞—Ñ—Ñ —Å–∏—Å—Ç–µ–º—ã</b>\n\nüëë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:</b>\n"
    text += f"‚Ä¢ {config.ADMIN_USER_ID} (—Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)\n"
    for user_id in admin_users:
        text += f"‚Ä¢ {user_id}\n"
    text += "\nüîß <b>–û–ø–µ—Ä–∞—Ç–æ—Ä—ã:</b>\n"
    for user_id in operator_users:
        text += f"‚Ä¢ {user_id}\n"
    await message.answer(text, parse_mode="HTML")

@router.message(Command("my_id"))
async def my_id_handler(message: Message):
    role = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if await is_admin_extended(message.from_user.id):
        role = "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    elif await is_operator_extended(message.from_user.id):
        role = "üîß –û–ø–µ—Ä–∞—Ç–æ—Ä"
    await message.answer(
        f"üÜî <b>–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n\n"
        f"ID: <code>{message.from_user.id}</code>\n"
        f"–†–æ–ª—å: {role}\n"
        f"–ò–º—è: {message.from_user.first_name}\n"
        f"Username: @{message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}",
        parse_mode="HTML"
    )

@router.message(Command("setup_admin_chat"))
async def setup_admin_chat_handler(message: Message):
    if message.from_user.id != config.ADMIN_USER_ID:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
        return
    if message.chat.type == ChatType.PRIVATE:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö")
        return
    admin_chats = await db.get_setting("admin_chats", [])
    if message.chat.id not in admin_chats:
        admin_chats.append(message.chat.id)
        await db.set_setting("admin_chats", admin_chats)
        await db.set_setting(f"chat_{message.chat.id}_title", message.chat.title)
    await message.answer(
        f"‚úÖ <b>–ß–∞—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π</b>\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {message.chat.title}\n"
        f"ID: {message.chat.id}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.",
        parse_mode="HTML"
    )

@router.message(AdminStates.admin_mode, F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def admin_stats_handler(message: Message):
    stats = await db.get_statistics()
    text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['total_orders']}\n"
        f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {stats['completed_orders']}\n"
        f"üí∞ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: {stats['total_volume']:,.2f} ‚ÇΩ\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {stats['completion_rate']:.1f}%\n\n"
        f"<b>–°–µ–≥–æ–¥–Ω—è:</b>\n"
        f"üìã –ó–∞—è–≤–æ–∫: {stats['today_orders']}\n"
        f"üí∞ –û–±–æ—Ä–æ—Ç: {stats['today_volume']:,.2f} ‚ÇΩ"
    )
    await message.answer(text, parse_mode="HTML")

@router.message(AdminStates.admin_mode, F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def admin_settings_handler(message: Message, state: FSMContext):
    current_percentage = await db.get_setting("admin_percentage", config.ADMIN_PERCENTAGE)
    captcha_status = normalize_bool(await db.get_setting("captcha_enabled", config.CAPTCHA_ENABLED))
    min_amount = await db.get_setting("min_amount", config.MIN_AMOUNT)
    max_amount = await db.get_setting("max_amount", config.MAX_AMOUNT)
    text = (
        f"‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        f"üí∏ –ü—Ä–æ—Ü–µ–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {current_percentage}%\n"
        f"ü§ñ –ö–∞–ø—á–∞: {'–≤–∫–ª—é—á–µ–Ω–∞' if captcha_status else '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}\n"
        f"üí∞ –õ–∏–º–∏—Ç—ã: {min_amount:,} - {max_amount:,} ‚ÇΩ\n\n"
        f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç: /set_percentage 5.5\n"
        f"‚Ä¢ –ö–∞–ø—á–∞: /toggle_captcha\n"
        f"‚Ä¢ –õ–∏–º–∏—Ç—ã: /set_limits 1000 500000\n"
        f"‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: /set_welcome"
    )
    await message.answer(text, parse_mode="HTML")

@router.message(AdminStates.admin_mode, F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def admin_broadcast_handler(message: Message, state: FSMContext):
    await message.answer("üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", parse_mode="HTML")
    await state.set_state(AdminStates.waiting_for_broadcast_message)

@router.message(AdminStates.waiting_for_broadcast_message)
async def process_broadcast(message: Message, state: FSMContext):
    if not await is_admin_extended(message.from_user.id):
        return
    users = await db.get_all_users()
    sent_count = failed_count = 0
    await message.answer(f"üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    for user_id in users:
        try:
            await message.bot.copy_message(chat_id=user_id, from_chat_id=message.chat.id, message_id=message.message_id)
            sent_count += 1
        except Exception as e:
            failed_count += 1
            logger.error(f"Failed to send broadcast to {user_id}: {e}")
    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n‚ùå –û—à–∏–±–æ–∫: {failed_count}")
    await state.set_state(AdminStates.admin_mode)

@router.message(AdminStates.admin_mode, F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def admin_balance_handler(message: Message):
    try:
        balance_data = await onlypays_api.get_balance()
        balance = balance_data.get('balance', 0)
        text = f"üí∞ <b>–ë–∞–ª–∞–Ω—Å –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞</b>\n\nüí≥ –î–æ—Å—Ç—É–ø–Ω–æ: {balance:,.2f} ‚ÇΩ"
    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:\n{e}"
    await message.answer(text, parse_mode="HTML")

@router.message(AdminStates.admin_mode, F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def admin_users_handler(message: Message):
    stats = await db.get_statistics()
    text = (
        f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n"
        f"üìä –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats['total_users']}\n"
        f"üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö: –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è\n"
        f"üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: 0\n\n"
        f"üí° –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        f"‚Ä¢ /user_info ID - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
        f"‚Ä¢ /block_user ID - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å\n"
        f"‚Ä¢ /unblock_user ID - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
    )
    await message.answer(text, parse_mode="HTML")

@router.message(AdminStates.admin_mode, F.text == "üìã –ó–∞—è–≤–∫–∏")
async def admin_orders_handler(message: Message):
    stats = await db.get_statistics()
    text = (
        f"üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏</b>\n\n"
        f"üìä –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['total_orders']}\n"
        f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['completed_orders']}\n"
        f"‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {stats['total_orders'] - stats['completed_orders']}\n\n"
        f"üí° –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"
        f"‚Ä¢ /order_info ID - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ\n"
        f"‚Ä¢ /complete_order ID - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É\n"
        f"‚Ä¢ /cancel_order ID - –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É"
    )
    await message.answer(text, parse_mode="HTML")

@router.message(AdminStates.admin_mode, F.text == "‚óÄÔ∏è –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏")
async def exit_admin_handler(message: Message, state: FSMContext):
    await state.clear()
    from handlers.user import show_main_menu
    await show_main_menu(message)

@router.message(Command("set_percentage"))
async def set_percentage_command(message: Message):
    if not await is_admin_extended(message.from_user.id):
        return
    try:
        percentage = float(message.text.split()[1])
        if not 0 <= percentage <= 50:
            await message.answer("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 50")
            return
        await db.set_setting("admin_percentage", percentage)
        await message.answer(f"‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {percentage}%")
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_percentage 5.5")

@router.message(Command("toggle_captcha"))
async def toggle_captcha_command(message: Message):
    if not await is_admin_extended(message.from_user.id):
        return
    try:
        current_status = normalize_bool(await db.get_setting("captcha_enabled", config.CAPTCHA_ENABLED))
        new_status = not current_status
        await db.set_setting("captcha_enabled", new_status)
        status_text = "–≤–∫–ª—é—á–µ–Ω–∞ ‚úÖ" if new_status else "–æ—Ç–∫–ª—é—á–µ–Ω–∞ ‚ùå"
        await message.answer(f"ü§ñ –ö–∞–ø—á–∞ {status_text}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(Command("user_info"))
async def user_info_handler(message: Message):
    if not await is_admin_extended(message.from_user.id):
        return
    try:
        user_id = int(message.text.split()[1])
        user = await db.get_user(user_id)
        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        orders = await db.get_user_orders(user_id, 5)
        text = (
            f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
            f"üÜî ID: <code>{user['user_id']}</code>\n"
            f"üë®‚Äçüíº –ò–º—è: {user['first_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üìù Username: @{user['username'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user['registration_date'][:16]}\n"
            f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {'–î–∞' if user.get('is_blocked') else '–ù–µ—Ç'}\n"
            f"üìä –û–ø–µ—Ä–∞—Ü–∏–π: {user.get('total_operations', 0)}\n"
            f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {user.get('total_amount', 0):,.0f} ‚ÇΩ\n"
            f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user.get('referral_count', 0)}\n"
            f"üîó –ü—Ä–∏–≥–ª–∞—à–µ–Ω: {user.get('referred_by') or '–ù–µ—Ç'}\n\n"
            f"üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:</b>\n"
        )
        if orders:
            for order in orders:
                status_emoji = {"waiting": "‚è≥", "finished": "‚úÖ"}.get(order['status'], "‚ùå")
                text += f"{status_emoji} #{order['id']} - {order['total_amount']:,.0f} ‚ÇΩ\n"
        else:
            text += "–ó–∞—è–≤–æ–∫ –Ω–µ—Ç"
        await message.answer(text, parse_mode="HTML")
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user_info USER_ID")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(Command("block_user"))
async def block_user_handler(message: Message):
    if not await is_admin_extended(message.from_user.id):
        return
    try:
        parts = message.text.split()
        user_id = int(parts[1])
        reason = " ".join(parts[2:]) if len(parts) > 2 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        user = await db.get_user(user_id)
        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        if user.get('is_blocked'):
            await message.answer(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            return
        await db.update_user(user_id, is_blocked=True)
        await message.answer(
            f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>\n\n"
            f"üÜî ID: {user_id}\n"
            f"üë§ –ò–º—è: {user['first_name']}\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"üë®‚Äçüíº –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª: {message.from_user.first_name}",
            parse_mode="HTML"
        )
        try:
            await message.bot.send_message(
                user_id,
                f"üö´ <b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>\n\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"üìû –î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {config.SUPPORT_MANAGER}",
                parse_mode="HTML"
            )
        except:
            pass
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /block_user USER_ID [–ø—Ä–∏—á–∏–Ω–∞]")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(Command("unblock_user"))
async def unblock_user_handler(message: Message):
    if not await is_admin_extended(message.from_user.id):
        return
    try:
        user_id = int(message.text.split()[1])
        user = await db.get_user(user_id)
        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        if not user.get('is_blocked'):
            await message.answer(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            return
        await db.update_user(user_id, is_blocked=False)
        await message.answer(
            f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>\n\n"
            f"üÜî ID: {user_id}\n"
            f"üë§ –ò–º—è: {user['first_name']}\n"
            f"üë®‚Äçüíº –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª: {message.from_user.first_name}",
            parse_mode="HTML"
        )
        try:
            await message.bot.send_message(
                user_id,
                f"‚úÖ <b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞.\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!",
                parse_mode="HTML"
            )
        except:
            pass
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unblock_user USER_ID")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(Command("search_user"))
async def search_user_handler(message: Message):
    if not await is_admin_extended(message.from_user.id):
        return
    try:
        username = message.text.split()[1].replace("@", "")
        async with aiosqlite.connect(db.db_path) as database:
            async with database.execute('SELECT * FROM users WHERE username = ? COLLATE NOCASE', (username,)) as cursor:
                row = await cursor.fetchone()
                if row:
                    columns = [description[0] for description in cursor.description]
                    user = dict(zip(columns, row))
        if not row:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        text = (
            f"üë§ <b>–ù–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>\n\n"
            f"üÜî ID: <code>{user['user_id']}</code>\n"
            f"üìù Username: @{user['username']}\n"
            f"üë®‚Äçüíº –ò–º—è: {user['first_name']}\n"
            f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user['registration_date'][:16]}\n"
            f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {'–î–∞' if user.get('is_blocked') else '–ù–µ—Ç'}"
        )
        await message.answer(text, parse_mode="HTML")
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search_user USERNAME")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(Command("recent_users"))
async def recent_users_handler(message: Message):
    if not await is_admin_extended(message.from_user.id):
        return
    try:
        limit = min(int(message.text.split()[1]) if len(message.text.split()) > 1 else 10, 50)
        async with aiosqlite.connect(db.db_path) as database:
            async with database.execute('''
                SELECT user_id, username, first_name, registration_date, total_operations
                FROM users ORDER BY registration_date DESC LIMIT ?
            ''', (limit,)) as cursor:
                rows = await cursor.fetchall()
        if not rows:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        text = f"üë• <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(rows)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
        for user_id, username, first_name, reg_date, operations in rows:
            text += f"üÜî {user_id} | @{username or '–Ω–µ—Ç'} | {first_name}\nüìÖ {reg_date[:16]} | üìä {operations or 0} –æ–ø–µ—Ä–∞—Ü–∏–π\n\n"
        await message.answer(text, parse_mode="HTML")
    except (IndexError, ValueError):
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (1-50)")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(Command("user_stats"))
async def user_stats_handler(message: Message):
    if not await is_admin_extended(message.from_user.id):
        return
    try:
        async with aiosqlite.connect(db.db_path) as database:
            async with database.execute('SELECT COUNT(*) FROM users') as cursor:
                total_users = (await cursor.fetchone())[0]
            async with database.execute('SELECT COUNT(*) FROM users WHERE is_blocked = 1') as cursor:
                blocked_users = (await cursor.fetchone())[0]
            async with database.execute('SELECT COUNT(*) FROM users WHERE DATE(registration_date) = DATE("now")') as cursor:
                today_registrations = (await cursor.fetchone())[0]
            async with database.execute('SELECT COUNT(*) FROM users WHERE total_operations > 0') as cursor:
                active_users = (await cursor.fetchone())[0]
        text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {blocked_users}\n"
            f"‚ö° –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}\n"
            f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π —Å–µ–≥–æ–¥–Ω—è: {today_registrations}\n"
            f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {(active_users/total_users*100):.1f}%"
        )
        await message.answer(text, parse_mode="HTML")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(Command("send_message"))
async def send_message_to_user_handler(message: Message):
    if not await is_admin_extended(message.from_user.id):
        return
    try:
        parts = message.text.split(None, 2)
        user_id = int(parts[1])
        text_to_send = parts[2]
        user = await db.get_user(user_id)
        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        full_message = (
            f"üì® <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>\n\n"
            f"{text_to_send}\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {config.SUPPORT_MANAGER}"
        )
        await message.bot.send_message(user_id, full_message, parse_mode="HTML")
        await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({user['first_name']})", parse_mode="HTML")
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send_message USER_ID —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(Command("check_captcha"))
async def check_captcha_status(message: Message):
    if not await is_admin_extended(message.from_user.id):
        return
    try:
        current_status = await db.get_setting("captcha_enabled", config.CAPTCHA_ENABLED)
        normalized_status = normalize_bool(current_status)
        await message.answer(
            f"üîç <b>–°—Ç–∞—Ç—É—Å –∫–∞–ø—á–∏:</b>\n\n"
            f"üìä –°—ã—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_status} ({type(current_status).__name__})\n"
            f"üîÑ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ: {normalized_status}\n"
            f"‚öôÔ∏è –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {config.CAPTCHA_ENABLED}\n"
            f"ü§ñ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {'–≤–∫–ª—é—á–µ–Ω–∞' if normalized_status else '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}",
            parse_mode="HTML"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")





@router.callback_query(F.data.startswith("review_"))
async def review_moderation(callback: CallbackQuery):
    if not await is_admin_extended(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    action, review_id = callback.data.split("_")[1:]
    
    try:
        if action == "approve":
            await db.update_review_status(review_id, "approved")
            await callback.answer("‚úÖ –û—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω")
            
            review_data = await db.get_review(review_id)
            if review_data:
                user = await db.get_user(review_data['user_id'])
                
                from datetime import datetime
                
                channel_text = (
                    f"‚≠êÔ∏è <b>–û—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ {config.EXCHANGE_NAME}</b>\n\n"
                    f"üë§ –û—Ç: {user['first_name']} (@{user['username'] or '—Å–∫—Ä—ã—Ç'})\n"
                    f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"üí¨ <b>–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:</b>\n"
                    f"{review_data['text']}\n\n"
                    f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    f"üí∞ {config.EXCHANGE_NAME} - –Ω–∞–¥–µ–∂–Ω—ã–π –æ–±–º–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
                    f"ü§ñ @{config.BOT_USERNAME}"
                )
                
                try:
                    await callback.bot.send_message(
                        config.REVIEWS_CHANNEL_ID,
                        channel_text,
                        parse_mode="HTML"
                    )
                    logger.info(f"Approved review {review_id} sent to reviews channel")
                except Exception as e:
                    logger.error(f"Failed to send review to channel: {e}")
            
            await callback.message.edit_text(
                f"{callback.message.text}\n\n‚úÖ <b>–û–î–û–ë–†–ï–ù –ò –û–ü–£–ë–õ–ò–ö–û–í–ê–ù</b>",
                parse_mode="HTML"
            )
        
        elif action == "reject":
            await db.update_review_status(review_id, "rejected")
            await callback.answer("‚ùå –û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            await callback.message.edit_text(
                f"{callback.message.text}\n\n‚ùå <b>–û–¢–ö–õ–û–ù–ï–ù</b>",
                parse_mode="HTML"
            )
        
    except Exception as e:
        logger.error(f"Review moderation error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)